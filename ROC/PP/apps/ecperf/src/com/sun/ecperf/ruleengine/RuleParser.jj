/*
 * Copyright (c) 1998-2000 by Sun Microsystems, Inc. All Rights Reserved.
 * This software is the proprietary information of Sun Microsystems, Inc.
 * Use is subject to license terms.
 *
 * $Id: RuleParser.jj,v 1.2 2003/03/22 04:55:01 emrek Exp $
 *
 */

/**
 * Original Author of JavaParser.jj : Sriram Sankar
 * Date: 6/11/96
 *
 * Author: Akara Sucharitakul
 * Date: 4/24/2000
 *
 * This file contains a Rule (Java) grammar and actions that
 * implement the parser front-end.
 *
 */

options {
  JAVA_UNICODE_ESCAPE = true;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false;
  DEBUG_LOOKAHEAD = false;
}

PARSER_BEGIN(RuleParser)

package com.sun.ecperf.ruleengine;

import java.io.InputStream;
import java.io.EOFException;
import java.util.*;
import com.sun.ecperf.common.*;

public class RuleParser {

  private RuleProcessor ruleProc;
  private Debug debug;
  private boolean debugging;

  public RuleParser(Object bean, InputStream stream) {
    this(bean, stream, 0);
  }

  public RuleParser(Object bean, InputStream stream, int debugLevel) {
    this(stream);
    ruleProc = new RuleProcessor(bean, debugLevel);
    if (debugLevel > 0) {
      debug = new DebugPrint(debugLevel, this);
      debugging = true;
    } else {
      debug = new Debug();
      debugging = false;
    }
  }

  public String evaluate() {
    String classification = null;
    try {
      classification = FirstRuleUnit();
      while (classification == null) {
	ruleProc.clearSymbols();
	classification = RuleUnit();
      }
      if (debugging)
        debug.println(6,
          "Rule Parser Version 1.0.2:  Rule parsed successfully.");
    } catch (ParseException e) {
      if (debugging) {
        debug.println(6,
          "Rule Parser Version 1.0.2:  Encountered errors during parse.");
        debug.println(7, e.getMessage());
      }
    } catch (EOFException e) {
      if (debugging)
        debug.println(7, e.getMessage());
    } catch (Exception e) {
      if (debugging) {
        debug.println(7, "Error in parsed code");
        debug.println(7, e.getMessage());
      }
      debug.printStackTrace(e);
    }
    return classification;
  }
}

PARSER_END(RuleParser)


/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT>
MORE :
{
  < ~[] >
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < ABSTRACT: "abstract" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

TOKEN : /* SEPARATORS */
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

TOKEN : /* OPERATORS */
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < RUNSIGNEDSHIFT: ">>>" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
}


/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */

void CompilationUnit() :
{}
{
  [ PackageDeclaration() ]
  ( ImportDeclaration() )*
  ( TypeDeclaration() )*
  <EOF>
}

void PackageDeclaration() :
{}
{
  "package" Name() ";"
  { throw new ParseException("Package declarations not supported in rule!"); }
}

void ImportDeclaration() :
{
  String nm = null;
  boolean pkg = false;
}
{
  "import" nm=Name() [ "." "*" { pkg = true; } ] ";"
  { ruleProc.importClass(nm, pkg); }
}

void TypeDeclaration() :
{}
{
  LOOKAHEAD( ( "abstract" | "final" | "public" )* "class" )
  ClassDeclaration()
  { throw new ParseException("Class declarations not supported in rule!"); }
|
  InterfaceDeclaration()
  { throw new ParseException("Interface declarations not supported in rule!"); }
|
  ";"
}


/*
 * Declaration syntax follows.
 */

void ClassDeclaration() :
{}
{
  ( "abstract" | "final" | "public" )*
  "class" <IDENTIFIER> [ "extends" Name() ] [ "implements" NameList() ]
  "{" ( ClassBodyDeclaration() )* "}"
}

void ClassBodyDeclaration() :
{}
{
  LOOKAHEAD(2)
  StaticInitializer()
|
  LOOKAHEAD( [ "public" | "protected" | "private" ] Name() "(" )
  ConstructorDeclaration()
|
  LOOKAHEAD( MethodDeclarationLookahead() )
  MethodDeclaration()
|
  FieldDeclaration()
}

// This production is to determine lookahead only.
void MethodDeclarationLookahead() :
{}
{
  ( "public" | "protected" | "private" | "static" | "abstract" | "final" | "native" | "synchronized" )*
  ResultType() <IDENTIFIER> "("
}

void InterfaceDeclaration() :
{}
{
  ( "abstract" | "public" )*
  "interface" <IDENTIFIER> [ "extends" NameList() ]
  "{" ( InterfaceMemberDeclaration() )* "}"
}

void InterfaceMemberDeclaration() :
{}
{
  LOOKAHEAD( MethodDeclarationLookahead() )
  MethodDeclaration()
|
  FieldDeclaration()
}

void FieldDeclaration() :
{}
{
  ( "public" | "protected" | "private" | "static" | "final" | "transient" | "volatile" )*
  Type(false) VariableDeclarator(null) ( "," VariableDeclarator(null) )* ";"
}

void MethodDeclaration() :
{}
{
  ( "public" | "protected" | "private" | "static" | "abstract" | "final" | "native" | "synchronized" )*
  ResultType() MethodDeclarator() [ "throws" NameList() ]
  ( Block() | ";" )
}

void MethodDeclarator() :
{}
{
  <IDENTIFIER> FormalParameters() ( "[" "]" )*
}

void FormalParameters() :
{}
{
  "(" [ FormalParameter() ( "," FormalParameter() )* ] ")"
}

void FormalParameter() :
{}
{
  Type(false) VariableDeclaratorId(null)
}

void ConstructorDeclaration() :
{}
{
  [ "public" | "protected" | "private" ]
  <IDENTIFIER> FormalParameters() [ "throws" NameList() ]
  "{" [ LOOKAHEAD(2) ExplicitConstructorInvocation() ] ( BlockStatement() )* "}"
}

void ExplicitConstructorInvocation() :
{}
{
  "this" Arguments(false) ";"
|
  "super" Arguments(false) ";"
}

void StaticInitializer() :
{}
{
  "static" Block()
  { throw new ParseException("Static block not supported in rule!"); }
}

void VariableDeclaratorId(Result type) :
{ String ident;
  int count = 0;
}
{
  <IDENTIFIER> { ident = token.image; } ( "[" "]" { ++count; } )*
  { ruleProc.localVar(type, ident, count); }
}

void VariableDeclarator(Result type) :
{}
{
  VariableDeclaratorId(type) [ "=" VariableInitializer(true) ]
}

void VariableInitializer(boolean eval) :
{}
{
  "{" [ VariableInitializer(false) ( LOOKAHEAD(2) "," 
	VariableInitializer(false) )* ] [ "," ] "}"
  { throw new ParseException("Static array initializers not yet supported!"); }
|
  Expression(eval)
  { if (eval) ruleProc.assignValue(); }
}

/*
 * Type, name and expression syntax follows.
 */

void Type(boolean eval) :
{ 
  byte t = -1;
  String nm = null;
  int dims = 0;
}
{
  ( t=PrimitiveType() | nm=Name() ) ( "[" "]" { ++dims; } )*
  { if (eval) ruleProc.pushType(t, nm, dims); }
}

byte PrimitiveType() :
{}
{
  "boolean"
  { return Result.BOOLEAN; }
|
  "char"
  { return Result.CHAR; }
|
  "byte"
  { return Result.BYTE; }
|
  "short"
  { return Result.SHORT; }
|
  "int"
  { return Result.INT; }
|
  "long"
  { return Result.LONG; }
|
  "float"
  { return Result.FLOAT; }
|
  "double"
  { return Result.DOUBLE; }
}

void ResultType() :
{}
{
  "void"
  { throw new ParseException("Method declarations not supported by rule!"); }
|
  Type(false)
}

String Name() :
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
{ StringBuffer buf = new StringBuffer(); }
{
  <IDENTIFIER> { buf.append(token.image); }
  ( LOOKAHEAD(2) "." <IDENTIFIER> { buf.append('.'); buf.append(token.image); }
  )*
  { return buf.toString(); }
}

List NameList() :
{ List namelst = new LinkedList();
  String nm = null;
}
{
  nm=Name() { namelst.add(nm); }
  ( "," nm=Name() { namelst.add(nm); }
  )*
  { return namelst; }
}

/*
 * Expression syntax follows.
 */

void Expression(boolean eval) :
{}
{
  LOOKAHEAD( PrimaryExpression(false) AssignmentOperator(false) )
  Assignment(eval)
|
  ConditionalExpression(eval)
}

void Assignment(boolean eval) :
{ char op; }
{
  PrimaryExpression(eval) op=AssignmentOperator(eval) Expression(eval)
  { if (eval) ruleProc.assignOps(op); }
}

char AssignmentOperator(boolean eval) :
{}
{
  "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|="
  {
    char op = 0;
    if (eval) {
	op = token.image.charAt(0);
	if (op == '>' && token.image.charAt(2) == op)
	    op = '@';
    }
    return op;
  }
}

void ConditionalExpression(boolean eval) :
{}
{
  ConditionalOrExpression(eval) [ "?" Expression(eval) ":"
  ConditionalExpression(eval) { if (eval) ruleProc.conditional(); } ]
}

void ConditionalOrExpression(boolean eval) :
{}
{
  ConditionalAndExpression(eval) ( "||"
    { if (eval) eval = !ruleProc.isTrue(); }
  ConditionalAndExpression(eval)
    { if (eval) ruleProc.conditionalOr(); } )*
}

void ConditionalAndExpression(boolean eval) :
{}
{
  InclusiveOrExpression(eval) ( "&&"
    { if (eval) eval = ruleProc.isTrue(); }
  InclusiveOrExpression(eval)
    { if (eval) ruleProc.conditionalAnd(); } )*
}

void InclusiveOrExpression(boolean eval) :
{}
{
  ExclusiveOrExpression(eval) ( "|" ExclusiveOrExpression(eval)
    { if (eval) ruleProc.inclusiveOr(); } )*
}

void ExclusiveOrExpression(boolean eval) :
{}
{
  AndExpression(eval) ( "^" AndExpression(eval)
    { if (eval) ruleProc.exclusiveOr(); } )*
}

void AndExpression(boolean eval) :
{}
{
  EqualityExpression(eval) ( "&" EqualityExpression(eval)
    { if (eval) ruleProc.and(); } )*
}

void EqualityExpression(boolean eval) :
{ boolean equals = true; }
{
  InstanceOfExpression(eval)
  ( ( "==" { equals = true; } | "!=" { equals = false; } )
  InstanceOfExpression(eval)
    {
	if (eval) {
	    if (equals)
		ruleProc.equals();
	    else
		ruleProc.notEquals();
	}
    } )*
}

void InstanceOfExpression(boolean eval) :
{}
{
  RelationalExpression(eval) [ "instanceof" Type(eval)
    { if (eval) ruleProc.instanceOf(); } ]
}

void RelationalExpression(boolean eval) :
{ char op = 0; }
{
  ShiftExpression(eval)
  ( ( "<" { op = '<'; } | ">" { op = '>'; } |
     "<=" { op = '{'; } | ">=" { op = '}'; } )
  ShiftExpression(eval) 
    {
	if (eval)
	    switch (op) {
		case '<' : ruleProc.lessThan();		break;
		case '>' : ruleProc.greaterThan();	break;
		case '{' : ruleProc.lessOrEqual();	break;
		case '}' : ruleProc.greaterOrEqual();	break;
	    }
    } )*
}

void ShiftExpression(boolean eval) :
{ char op = 0; }
{
  AdditiveExpression(eval)
  ( ( "<<" { op = '<'; } | ">>" { op = '>'; } | ">>>" { op = '@'; } )
  AdditiveExpression(eval)
    {
	if (eval)
	    switch (op) {
		case '<' : ruleProc.leftShift();	  break;
		case '>' : ruleProc.rightShift();	  break;
		case '@' : ruleProc.unsignedRightShift(); break;
	    }
    } )*
}

void AdditiveExpression(boolean eval) :
{ char op = 0; }
{ 
  MultiplicativeExpression(eval)
  ( ( "+" { op = '+'; } | "-" { op = '-'; } )
  MultiplicativeExpression(eval)
    {
	if (eval)
	    switch (op) {
		case '+' : ruleProc.add();	break;
		case '-' : ruleProc.subtract();	break;
	    }
    } )*
}

void MultiplicativeExpression(boolean eval) :
{ char op = 0; }
{
  UnaryExpression(eval)
  ( ( "*" { op = '*'; } | "/" { op = '/'; } | "%" { op = '%'; } )
  UnaryExpression(eval)
    {
	if (eval)
	    switch (op) {
		case '*' : ruleProc.multiply();	break;
		case '/' : ruleProc.divide();	break;
		case '%' : ruleProc.remainder();break;
	    }
    } )*
}

void UnaryExpression(boolean eval) :
{ char op = 0; }
{
  PreIncrementExpression(eval)
|
  PreDecrementExpression(eval)
|
  ( "+" { op = '+'; } | "-" { op = '-'; } ) UnaryExpression(eval)
    { 
	if (eval)
	    switch (op) {
		case '+' : ruleProc.unaryPlus();  break;
		case '-' : ruleProc.unaryMinus(); break;
	    }
    }
|
  UnaryExpressionNotPlusMinus(eval)
}

void PreIncrementExpression(boolean eval) :
{}
{
  "++" PrimaryExpression(eval)
    { if (eval) ruleProc.preIncrement(); }
}

void PreDecrementExpression(boolean eval) :
{}
{
  "--" PrimaryExpression(eval)
    { if (eval) ruleProc.preDecrement(); }
}

void UnaryExpressionNotPlusMinus(boolean eval) :
{ char op = 0; }
{
  ( "~" { op = '~'; } | "!" { op = '!'; } ) UnaryExpression(eval)
    {
	if (eval)
	    switch (op) {
		case '~' : ruleProc.bitComplement();	break;
		case '!' : ruleProc.logicalComplement();	break;
	    }
    }
|
  LOOKAHEAD( CastLookahead() )
  CastExpression(eval)
|
  PostfixExpression(eval)
}

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
void CastLookahead() :
{}
{
  LOOKAHEAD(2)
  "(" PrimitiveType()
|
  LOOKAHEAD("(" Name() "[")
  "(" Name() "[" "]"
|
  "(" Name() ")" ( "~" | "!" | "(" | <IDENTIFIER> | "this" | "super" | "new" | Literal(false) )
}

/**
 * PostfixExpression not supported. They need post-expression stack
 * evaluations and are harder to implement. We just decide not to
 * support them for now.
 * Throws ParseException when encountered.
 */
void PostfixExpression(boolean eval) :
{ boolean p = false; }
{
  PrimaryExpression(eval) [ "++" { p = true; } | "--" { p = true; } ]
    {
	if (p) throw new ParseException(
	    "PostfixExpression not yet supported by parser");
    }
}

void CastExpression(boolean eval) :
{ 
  byte type;
  int dims = 0;
  String nm;
}
{
  LOOKAHEAD(2)
  "(" type=PrimitiveType() ( "[" "]" { ++dims; } )* ")" UnaryExpression(false)
    { if (eval) ruleProc.primitiveCast(type, dims); }
|
  "(" nm=Name() ( "[" "]" { ++dims; } )* ")" UnaryExpressionNotPlusMinus(false)
    { if (eval) ruleProc.refCast(nm, dims); }
}

void PrimaryExpression(boolean eval) :
{}
{
  PrimaryPrefix(eval) ( PrimarySuffix(eval) )*
}

void PrimaryPrefix(boolean eval) :
{ String nm; }
{
  Literal(eval)
|
  nm=Name()
  { if (eval) ruleProc.evalName(nm); }
|
  "this"
  { if (eval) ruleProc.pushBean(); }
|
  "super" "." <IDENTIFIER>
  { throw new ParseException("'super' is not valid in rule's context!"); }
|
  "(" Expression(eval) ")"
|
  AllocationExpression(eval)
}

void PrimarySuffix(boolean eval) :
{ List params; }
{
  "[" Expression(eval) "]"
  { if (eval) ruleProc.arrayIndexRef(); }
|
  "." <IDENTIFIER>
  { if (eval) ruleProc.suffixIdentifier(token.image); }
|
  params=Arguments(eval)
  { if (eval) ruleProc.method(params); }
}

void Literal(boolean eval) :
{}
{
  <INTEGER_LITERAL>
  { if (eval) ruleProc.intLiteral(token.image); }
|
  <FLOATING_POINT_LITERAL>
  { if (eval) ruleProc.floatLiteral(token.image); }
|
  <CHARACTER_LITERAL>
  { if (eval) ruleProc.charLiteral(token.image); }
|
  <STRING_LITERAL>
  { if (eval) ruleProc.stringLiteral(token.image); }
|
  BooleanLiteral(eval)
|
  NullLiteral(eval)
}

void BooleanLiteral(boolean eval) :
{}
{
  "true"
  { if (eval) ruleProc.booleanTrue(); }
|
  "false"
  { if (eval) ruleProc.booleanFalse(); }
}

void NullLiteral(boolean eval) :
{ }
{
  "null"
  { if (eval) ruleProc.nullLiteral(); }
}

List Arguments(boolean eval) :
{
  List params = eval ? new ArrayList() : null;
}
{
  "(" [ ArgumentList(eval, params) ] ")"
  { return params; }
}

void ArgumentList(boolean eval, List params) :
{}
{
  Expression(eval) { if (eval) ruleProc.addParams(params); }
  ( "," Expression(eval) { if (eval) ruleProc.addParams(params); } )*
}

void AllocationExpression(boolean eval) :
{
  byte type;
  String nm;
  List args;
}
{
  LOOKAHEAD(2)
  "new" type=PrimitiveType() args=ArrayDimensions(eval)
  { if (eval) ruleProc.newPrimitiveArray(type, args); }
|
  "new" nm=Name() ( args=Arguments(eval)
    { if (eval) ruleProc.newObject(nm, args); }
|
  args=ArrayDimensions(eval) )
    { if (eval) ruleProc.newObjectArray(nm, args); }
}

/*
 * The second LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
List ArrayDimensions(boolean eval) :
{ LinkedList dimList = new LinkedList(); }
{
  ( LOOKAHEAD(2) "[" Expression(eval) "]"
    { if (eval) ruleProc.addDimension(dimList); } )+
  ( LOOKAHEAD(2) "[" "]"
    { if (eval) ruleProc.addDimension(0, dimList); } )*
    { return dimList; }
}


/*
 * Statement syntax follows.
 */

void Statement(boolean eval) :
{}
{
  LOOKAHEAD(Type(false) <IDENTIFIER>)
  LocalVariableDeclaration() ";"
|
  StatementExpression(eval) ";"
}

void LabeledStatement() :
{}
{
  <IDENTIFIER> ":" Statement(false)
  { throw new ParseException("LabeledStatement not supported by rule!"); }
}

void Block() :
{}
{
  "{" ( BlockStatement() )* "}"
}

void BlockStatement() :
{}
{
  LOOKAHEAD(Type(false) <IDENTIFIER>)
  LocalVariableDeclaration() ";"
|
  Statement(false)
}

void LocalVariableDeclaration() :
{ Result t = null; }
{
  Type(true) { t = ruleProc.popResult(); } VariableDeclarator(t)
  ( "," VariableDeclarator(t) )*
}

void EmptyStatement() :
{}
{
  ";"
}

void StatementExpression(boolean eval) :
/*
 * The last expansion of this production accepts more than the legal
 * Java expansions for StatementExpression.
 */
{}
{
  PreIncrementExpression(eval)
|
  PreDecrementExpression(eval)
|
  LOOKAHEAD( PrimaryExpression(false) AssignmentOperator(false) )
  Assignment(eval)
|
  PostfixExpression(eval)
}

void SwitchStatement() :
{}
{
  "switch" { throw new ParseException("Switch not supported in rule!"); }
    "(" Expression(false) ")" "{"
    ( SwitchLabel() ( BlockStatement() )* )*
  "}"
}

void SwitchLabel() :
{}
{
  "case" { throw new ParseException("Switch not supported in rule!"); } 
  Expression(false) ":"
|
  "default" ":"
}

void IfStatement() :
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */ 
{}
{
  "if" { throw new ParseException("if statement not supported in rule!"); }
  "(" Expression(false) ")" Statement(false) [ LOOKAHEAD(1) "else"
  Statement(false) ]
}

void WhileStatement() :
{}
{
  "while" { throw new ParseException(
  "while statement not supported in rule!"); } "(" Expression(false) ")"
   Statement(false)
}

void DoStatement() :
{}
{
  "do" { throw new ParseException("do statement not supported in rule!"); }
  Statement(false) "while" "(" Expression(false) ")" ";"
}

void ForStatement() :
{}
{
  "for"  { throw new ParseException("for statement not supported in rule!"); }
  "(" [ ForInit() ] ";" [ Expression(false) ] ";" [ ForUpdate() ] ")" Statement(false)
}

void ForInit() :
{}
{
  LOOKAHEAD( Type(false) <IDENTIFIER> )
  LocalVariableDeclaration()
|
  StatementExpressionList()
}

void StatementExpressionList() :
{}
{
  StatementExpression(false) ( "," StatementExpression(false) )*
}

void ForUpdate() :
{}
{
  StatementExpressionList()
}

void BreakStatement() :
{}
{
  "break" { throw new ParseException("Break not supported!"); } [ <IDENTIFIER> ] ";"
}

void ContinueStatement() :
{}
{
  "continue" { throw new ParseException("Continue not supported!"); } [ <IDENTIFIER> ] ";"
}

void ReturnStatement() :
{}
{
  "return" { throw new ParseException("Return not supported!"); } [ Expression(false) ] ";"
}

void ThrowStatement() :
{}
{
  "throw" { throw new ParseException("Throw not supported for rule syntax!"); } Expression(false) ";"
}

void SynchronizedStatement() :
{}
{
  "synchronized" { throw new ParseException("Synchronized not supported for rule syntax!"); } "(" Expression(false) ")" Block()
}

void TryStatement() :
/*
 * Semantic check required here to make sure that at least one
 * finally/catch is present.
 */ 
{}
{
  "try" { throw new ParseException("Try not yet supported, might add if needed"); } Block()
  ( "catch" "(" FormalParameter() ")" Block() )*
  [ "finally" Block() ]
}
/*
 * Rule Declarations
 */
String RuleUnit() throws EOFException :
{ String cls = null; }
{
  <IDENTIFIER> { cls = token.image; } ":"
  [ ( LOOKAHEAD(Statement(false)) Statement(true) { ruleProc.clearStack(); } )*
  ConditionalOrExpression(true) { if(!ruleProc.isTrue()) cls = null; } ]
    { return cls; }
|
  <EOF>
    { throw new EOFException("End of stream reached without match"); }
}

String FirstRuleUnit() throws EOFException :
{ String cls = null; }
{
  ( ImportDeclaration() )*
  cls=RuleUnit()
  { return cls; }
}
