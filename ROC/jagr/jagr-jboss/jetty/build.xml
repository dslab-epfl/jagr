<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project [
  <!ENTITY buildmagic SYSTEM "resource://org/jboss/tools/buildmagic/common.xml">
]>

<!-- ====================================================================== -->
<!--                                                                        -->
<!--  JBoss, the OpenSource J2EE webOS                                      -->
<!--                                                                        -->
<!--  Distributable under LGPL license.                                     -->
<!--  See terms of license at http://www.gnu.org.                           -->
<!--                                                                        -->
<!-- ====================================================================== -->

<!-- $Id: build.xml,v 1.1 2004/06/08 13:33:05 emrek Exp $ -->

<project default="main" name="JBoss/Jetty">

  <!-- ================================================================== -->
  <!-- Setup                                                              -->
  <!-- ================================================================== -->

  <!--
     | Include the common Buildmagic elements.
     |
     | This defines several different targets, properties and paths.
     | It also sets up the basic extention tasks amoung other things.
   -->

  &buildmagic;


  <!-- ================================================================== -->
  <!-- Initialization                                                     -->
  <!-- ================================================================== -->

  <!--
     | Initialize the build system.  Must depend on '_buildmagic:init'.
     | Other targets should depend on 'init' or things will mysteriously fail.
   -->

  <target name="init" unless="init.disable" depends="_buildmagic:init">
  </target>


  <!-- ================================================================== -->
  <!-- Configuration                                                      -->
  <!-- ================================================================== -->

  <!--
     | Configure the build system.
     |
     | This target is invoked by the Buildmagic initialization logic and
     | should contain module specific configuration elements.
   -->

  <target name="configure" unless="configure.disable">

    <!-- =================== -->
    <!-- Basic Configuration -->
    <!-- =================== -->

    <!-- Module name(s) & version -->
    <property name="module.name" value="jetty-plugin"/>
    <property name="module.Name" value="JBoss Jetty"/>
    <property name="module.version" value="DEV"/>

    <property name="RELEASE.MAJOR"  value="4.2" />
    <property name="RELEASE.MAJOR.MINOR"  value="4.2.9" />

    <!-- ROC CONFIG EMK begin -->
    <!-- Configuration settings for ROC JBoss -->
    <property name="roc.config.root" value="${project.root}/build/roc-config"/>
    <path id="roc.config.classpath">
      <pathelement path="${roc.config.root}"/>
    </path>
    <!-- ROC CONFIG EMK end -->

    <!-- ========= -->
    <!-- Libraries -->
    <!-- ========= -->

    <!-- Java Secure Socket Extension (JSSE) -->
    <property name="sun.jsse.root" value="${project.thirdparty}/sun/jsse"/>
    <property name="sun.jsse.lib" value="${sun.jsse.root}/lib"/>
    <path id="sun.jsse.classpath">
      <fileset dir="${sun.jsse.lib}">
        <include name="*.jar"/>
      </fileset>
    </path>

    <!-- Apache Crimson (XML/DOM) -->
    <property name="apache.crimson.root" value="${project.thirdparty}/apache/crimson"/>
    <property name="apache.crimson.lib" value="${apache.crimson.root}/lib"/>
    <path id="apache.crimson.classpath">
      <pathelement path="${apache.crimson.lib}/crimson.jar"/>
    </path>

    <!-- Apache Xalan/Xerces -->
    <property name="apache.xalan.root" value="${project.thirdparty}/apache/xalan"/>
    <property name="apache.xalan.lib" value="${apache.xalan.root}/lib"/>
    <path id="apache.xalan.classpath">
      <pathelement path="${apache.xalan.lib}/xml-apis.jar"/>
    </path>

    <!-- Apache Commons -->
    <property name="apache.commons.root" value="${project.thirdparty}/apache/commons"/>
    <property name="apache.commons.lib" value="${apache.commons.root}/lib"/>
    <path id="apache.commons.classpath">
      <pathelement path="${apache.commons.lib}/commons-collections.jar"/>
      <pathelement path="${apache.commons.lib}/commons-logging.jar"/>
    </path>

    <!-- Log4j -->
    <property name="apache.log4j.root" value="${project.thirdparty}/apache/log4j"/>
    <property name="apache.log4j.lib" value="${apache.log4j.root}/lib"/>
    <path id="apache.log4j.classpath">
      <pathelement path="${apache.log4j.lib}/log4j.jar"/>
    </path>

    <!-- JUnit -->
    <property name="junit.junit.root" value="${project.thirdparty}/junit/junit"/>
    <property name="junit.junit.lib" value="${junit.junit.root}/lib"/>
    <path id="junit.junit.classpath">
      <pathelement path="${junit.junit.lib}/junit.jar"/>
    </path>

    <!-- JavaGroups -->
    <property name="javagroups.javagroups.root" value="${project.thirdparty}/javagroups/javagroups"/>
    <property name="javagroups.javagroups.lib" value="${javagroups.javagroups.root}/lib"/>
    <path id="javagroups.javagroups.classpath">
      <pathelement path="${javagroups.javagroups.lib}/javagroups-2.0.jar"/>
    </path>

    <!-- Ant -->
    <property name="apache.ant.root" value="${project.tools}"/>
    <property name="apache.ant.lib" value="${apache.ant.root}/lib"/>
    <path id="apache.ant.classpath">
      <pathelement path="${apache.ant.lib}/ant.jar"/>
    </path>

    <!-- Jetty -->
    <property name="module.ext" value="${module.root}/ext"/>
    <property name="mortbay.jetty.cvs" value="${module.root}/mortbay-cvs"/>
    <property name="mortbay.jetty.cvs.tag" value="Jetty_4_2_0"/>
    <property name="mortbay.jettyextra.cvs.tag" value="Jetty_4_2_0"/>
    <property name="jetty.jar" value="org.mortbay.jetty.jar"/>
    <property name="jmx.jar" value="org.mortbay.jmx.jar"/>
    <property name="j2ee.jar" value="org.mortbay.j2ee.jar"/>
    <property name="jetty.ejb.jar" value="org.mortbay.j2ee.session.ejb.jar"/>
    <property name="servlet.jar" value="javax.servlet.jar"/>
    <property name="jboss.jetty.jar" value="org.jboss.jetty.jar"/>

    <!-- Java Compiler -->
    <path id="javac.jar.classpath">
    </path>

    <!-- ROC Pinpoint -->
    <property name="roc.pinpoint.root" value="${project.thirdparty}/roc/pinpoint"/>
    <property name="roc.pinpoint.lib" value="${roc.pinpoint.root}"/>
    <path id="roc.pinpoint.classpath">
      <pathelement path="${roc.pinpoint.lib}/pinpoint.jar"/>
    </path>

    <!-- The combined library classpath -->
    <path id="library.classpath">
      <path refid="sun.jsse.classpath"/>
      <path refid="apache.crimson.classpath"/>
      <path refid="apache.xalan.classpath"/>
      <path refid="apache.log4j.classpath"/>
      <path refid="apache.commons.classpath"/>
      <path refid="junit.junit.classpath"/>
      <path refid="javagroups.javagroups.classpath"/>
      <path refid="apache.ant.classpath"/>
      <path refid="roc.pinpoint.classpath"/>
      <path refid="roc.config.classpath"/>
    </path>

    <!-- ======= -->
    <!-- Modules -->
    <!-- ======= -->

    <!-- J2EE -->
    <property name="jboss.j2ee.root" value="${project.root}/j2ee/output"/>
    <property name="jboss.j2ee.lib" value="${jboss.j2ee.root}/lib"/>
    <path id="jboss.j2ee.classpath">
      <pathelement path="${jboss.j2ee.lib}/jboss-j2ee.jar"/>
    </path>

    <!-- Common -->
    <property name="jboss.common.root" value="${project.root}/common/output"/>
    <property name="jboss.common.lib" value="${jboss.common.root}/lib"/>
    <path id="jboss.common.classpath">
      <pathelement path="${jboss.common.lib}/jboss-common.jar"/>
    </path>

    <!-- System -->
    <property name="jboss.system.root" value="${project.root}/system/output"/>
    <property name="jboss.system.lib" value="${jboss.system.root}/lib"/>
    <path id="jboss.system.classpath">
      <pathelement path="${jboss.system.lib}/jboss-system.jar"/>
    </path>

    <!-- Server -->
    <property name="jboss.server.root" value="${project.root}/server/output"/>
    <property name="jboss.server.lib" value="${jboss.server.root}/lib"/>
    <path id="jboss.server.classpath">
      <pathelement path="${jboss.server.lib}/jboss.jar"/>
    </path>

    <!-- JMX -->
    <property name="jboss.jmx.root" value="${project.root}/jmx/output"/>
    <property name="jboss.jmx.lib" value="${jboss.jmx.root}/lib"/>
    <path id="jboss.jmx.classpath">
      <pathelement path="${jboss.jmx.lib}/jboss-jmx.jar"/>
    </path>

    <!-- Security -->
    <property name="jboss.security.root" value="${project.root}/security/output"/>
    <property name="jboss.security.lib" value="${jboss.security.root}/lib"/>
    <path id="jboss.security.classpath">
      <pathelement path="${jboss.security.lib}/jboss-jaas.jar"/>
      <pathelement path="${jboss.security.lib}/jbosssx.jar"/>
    </path>

     <!-- Cluster -->
     <property name="jboss.cluster.root" value="${project.root}/cluster/output"/>
     <property name="jboss.cluster.lib" value="${jboss.cluster.root}/lib"/>
     <property name="jboss.cluster.classes" value="${jboss.cluster.root}/classes"/>
     <path id="jboss.cluster.classpath">
<!--
       <pathelement path="${jboss.cluster.lib}/jbossha-httpsession.sar"/>
 -->
       <pathelement path="${jboss.cluster.classes}"/>
     </path>

    <!-- The combined dependent module classpath -->
    <path id="dependentmodule.classpath">
      <path refid="jboss.j2ee.classpath"/>
      <path refid="jboss.common.classpath"/>
      <path refid="jboss.system.classpath"/>
      <path refid="jboss.server.classpath"/>
      <path refid="jboss.security.classpath"/>
      <path refid="jboss.jmx.classpath"/>
      <path refid="jboss.cluster.classpath"/>
    </path>

    <!-- ===== -->
    <!-- Tasks -->
    <!-- ===== -->

    <!-- Where source files live -->
    <property name="source.java" value="${module.source}/main"/>
    <property name="source.etc" value="${module.source}/etc"/>
    <property name="source.resources" value="${module.source}/resources"/>

    <!-- Where build generated files will go -->
    <property name="build.classes" value="${module.output}/classes"/>
    <property name="build.lib" value="${module.output}/lib"/>
    <property name="build.api" value="${module.output}/api"/>
    <property name="build.todo" value="${module.output}/todo"/>
    <property name="build.etc" value="${module.output}/etc"/>
    <property name="build.ejb" value="${module.output}/ejb"/>
    <property name="build.src" value="${module.output}/src"/>
    <property name="build.metadata" value="${module.output}/META-INF"/>
    <property name="build.reports" value="${module.output}/reports"/>
    <property name="build.resources" value="${module.output}/resources"/>

    <!-- Install/Release structure -->
    <property name="install.id" value="${module.name}-${module.version}"/>
    <property name="release.id" value="${install.id}"/>
    <property name="install.root" value="${module.output}/${install.id}"/>

    <!-- The combined thirdparty classpath -->
    <path id="thirdparty.classpath">
      <path refid="library.classpath"/>
      <path refid="dependentmodule.classpath"/>
    </path>

    <!-- This module is based on Java 1.2 -->
    <property name="javac.target" value="1.2"/>

    <!-- classpath and local.classpath must have a value using with a path -->
    <property name="classpath" value=""/>
    <property name="local.classpath" value=""/>

    <!-- The classpath required to build classes. -->
    <path id="javac.classpath">
      <pathelement path="${classpath}"/>
      <pathelement path="${local.classpath}"/>
      <path refid="thirdparty.classpath"/>
    </path>

    <!-- The classpath required to build javadocs. -->
    <path id="javadoc.classpath">
      <path refid="javac.classpath"/>
    </path>

    <!-- Packages to include when generating api documentation -->
    <property name="javadoc.packages" value="org.*"/>

    <!-- Override JUnit defaults -->
    <property name="junit.timeout" value="240000"/> <!-- 4 minutes -->
    <property name="junit.batchtest.todir" value="${build.reports}"/>
    <property name="junit.jvm.options" value="-Ddummy"/>

    <!-- xdoclet -->
    <path id="xdoclet.task.classpath">
      <path refid="javac.classpath"/>
      <fileset dir="${project.thirdparty}/xdoclet/xdoclet/lib">
        <include name="**/*.jar"/>
      </fileset>
    </path>

  <taskdef
   name="docdoclet"
   classname="xdoclet.modules.doc.DocumentDocletTask"
   classpathref="xdoclet.task.classpath"
  />
  <taskdef
   name="jmxdoclet"
   classname="xdoclet.modules.jmx.JMXDocletTask"
   classpathref="xdoclet.task.classpath"
  />
  <taskdef
   name="webdoclet"
   classname="xdoclet.modules.web.WebDocletTask"
   classpathref="xdoclet.task.classpath"
  />
  <taskdef
   name="ejbdoclet"
   classname="xdoclet.modules.ejb.EjbDocletTask"
   classpathref="xdoclet.task.classpath"
  />

  </target>



  <!-- ====================================================================== -->
  <!-- Merge Jetty CVS and JBoss/Jetty                                        -->
  <!-- Note: all modified Jetty files must be listed below in the "copy" task -->
  <!-- ====================================================================== -->

  <target name="merge-mortbay-cvs" depends="init">
    <mkdir dir="${mortbay.jetty.cvs}"/>

    <!-- Checkout from Jetty CVS (actually this is necessary on the first run only) -->
    <cvs command="-r checkout"
         cvsRoot=":pserver:anonymous@cvs.jetty.sourceforge.net:/cvsroot/jetty"
         package="Jetty"
         tag="${mortbay.jetty.cvs.tag}"
         quiet="true"
         dest="${mortbay.jetty.cvs}"/>
    <cvs command="-r checkout"
         cvsRoot=":pserver:anonymous@cvs.jetty.sourceforge.net:/cvsroot/jetty"
         package="JettyExtra"
         tag="${mortbay.jettyextra.cvs.tag}"
         quiet="true"
         dest="${mortbay.jetty.cvs}"/>
    <!-- Copy modified files JBoss CVS tree -> Jetty CVS tree -->
    <copy todir="${mortbay.jetty.cvs}/Jetty/src"
          overwrite="yes">
      <fileset dir="${source.java}">
         <!-- include files that was modified in JBoss/Jetty -->
         <include name=""/>
      </fileset>
    </copy>
         <!-- include files that was modified in JBoss/Jetty -->
<!--
    <copy todir="${mortbay.jetty.cvs}/JettyExtra/jmx/src"
          overwrite="yes">
      <fileset dir="${source.java}">
         <include name=""/>
      </fileset>
    </copy>
-->
    <!-- Update from Jetty CVS to merge changes -->
    <cvs command="-r update -d"
         cvsRoot=":pserver:anonymous@cvs.jetty.sourceforge.net:/cvsroot/jetty"
         package="Jetty"
         tag="${mortbay.jetty.cvs.tag}"
         quiet="true"
         dest="${mortbay.jetty.cvs}"/>
    <cvs command="-r update -d"
         cvsRoot=":pserver:anonymous@cvs.jetty.sourceforge.net:/cvsroot/jetty"
         package="JettyExtra"
         tag="${mortbay.jettyextra.cvs.tag}"
         quiet="true"
         dest="${mortbay.jetty.cvs}"/>

    <!-- Delete all Jetty files from JBoss CVS tree -->
    <delete>
      <fileset dir="${source.java}">
         <include name="javax/servlet/**"/>
         <include name="org/mortbay/**"/>
      </fileset>
    </delete>

    <!-- Copy all files Jetty CVS tree -> JBoss CVS tree -->
    <copy todir="${source.java}">
      <fileset dir="${mortbay.jetty.cvs}/Jetty/src">
         <include name="javax/servlet/**"/>
         <include name="org/mortbay/**"/>
      </fileset>
    </copy>
    <!-- Copy all files JettyExtra CVS tree -> JBoss CVS tree -->
    <copy todir="${source.java}">
      <fileset dir="${mortbay.jetty.cvs}/JettyExtra/j2ee/src">
         <include name="org/mortbay/**"/>
      </fileset>
    </copy>
  </target>


  <!-- ================================================================== -->
  <!-- Compile                                                            -->
  <!-- ================================================================== -->

  <!--
     |  Compile everything.
     |
     |  This target should depend on other compile-* targets for each
     |  different type of compile that needs to be performed, short of
     |  documentation compiles.
    -->
  <target name="compile"
	  depends="compile-bean-sources, compile-classes, compile-etc, compile-resources"
	  description="Compile all source files."/>

  <!-- Compile EJB with XDoclet -->
  <target name="compile-bean-sources" depends="init">

    <!-- generate MBean interface -->
    <mkdir dir="${build.src}"/>
    <jmxdoclet
     destdir="${build.src}"
     excludedtags="@version,@author,@todo"
    >
    <fileset dir="${source.java}">
     <include name="**/*Service.java"/>
    </fileset>
    <mbeaninterface mergedir="${project.tools}/etc/xdoclet/templates"/>
  <!-- not yet much use - use a static copy instead
    <jbossxmlservicetemplate destdir="${output.dds}" servicefile="jboss-service.xml"/>
  -->
  </jmxdoclet>

    <mkdir dir="${build.ejb}"/>
    <mkdir dir="${build.metadata}"/>

    <ejbdoclet
	     destdir="${build.ejb}"
	     ejbspec="2.0"
	     excludedtags="@version,@author">
      <fileset dir="${source.java}">
        <include name="org/mortbay/j2ee/session/ejb/CMP*Bean.java" />
      </fileset>
      <packageSubstitution packages="ejb" substituteWith="interfaces"/>
<!--
      <session/>
      <dataobject/>
-->
      <localinterface/>
      <localhomeinterface/>
      <remoteinterface/>
      <homeinterface/>
      <entitypk/>
      <entitycmp/>
      <deploymentdescriptor xmlencoding ="UTF-8"
			    destdir="${build.metadata}"/>
      <jboss version="3.0"
             xmlencoding="UTF-8"
	     typemapping="Hypersonic SQL"
	     datasource="java:/DefaultDS"
	     destdir="${build.metadata}"
             mergedir="${source.resources}/org.mortbay.j2ee"
      />
    </ejbdoclet>

    <ejbdoclet
	     destdir="${build.ejb}"
	     ejbspec="2.0"
	     excludedtags="@version,@author">
      <fileset dir="${source.java}">
        <include name="org/mortbay/j2ee/session/ejb/CMR*Bean.java" />
      </fileset>

      <packageSubstitution packages="ejb" substituteWith="interfaces"/>
<!--
      <session/>
      <dataobject/>
-->
      <localinterface/>
      <localhomeinterface/>
      <remoteinterface/>
      <homeinterface/>
      <entitypk/>
      <entitycmp/>
<!-- we need the classes to compile, but the dds are still broken -->
<!--
      <deploymentdescriptor xmlencoding ="UTF-8"
			    destdir="${build.metadata}"/>
      <jboss version="3.0"
             xmlencoding="UTF-8"
	     typemapping="Hypersonic SQL"
	     datasource="java:/DefaultDS"
	     destdir="${build.metadata}"
             mergedir="${source.resources}/org.mortbay.j2ee"
      />
-->
    </ejbdoclet>
  </target>

  <!-- Compile all class files -->
  <target name="compile-classes" depends="init">
    <mkdir dir="${build.classes}"/>
    <javac destdir="${build.classes}"
           optimize="${javac.optimize}"
	   target="${javac.target}"
           debug="${javac.debug}"
	   depend="${javac.depend}"
	   verbose="${javac.verbose}"
	   deprecation="${javac.deprecation}"
	   includeAntRuntime="${javac.include.ant.runtime}"
	   includeJavaRuntime="${javac.include.java.runtime}"
	   failonerror="${javac.fail.onerror}">
       <src path="${build.src}"/>
       <src path="${source.java}"/>
       <src path="${build.ejb}"/>
       <classpath refid="javac.classpath"/>
       <include name="${javac.includes}"/>
    </javac>

    <!-- these are for Jetty jars -->
    <copy todir="${build.classes}">
      <fileset dir="${source.java}">
         <include name="**/*.properties"/>
         <include name="**/*.dtd"/>
         <include name="**/*.xml"/>
      </fileset>
    </copy>

    <copy todir="${build.classes}">
      <fileset dir="${source.java}">
        <include name="**/MANIFEST.MF" />
      </fileset>
    </copy>

    <replace dir="${build.classes}">
      <include name="**/MANIFEST.MF" />
      <replacefilter token="RELEASE_MAJOR_MINOR" value="${RELEASE.MAJOR.MINOR}" />
      <replacefilter token="RELEASE_MAJOR" value="${RELEASE.MAJOR}" />
      <replacefilter token="Class-Path" value="MortBay-StandAlone-ClassPath" />
    </replace>

<!-- lose this once the new manifests are rolled into HEAD -->
    <touch file="${build.classes}/org/mortbay/jetty/MANIFEST.MF"/>
    <touch file="${build.classes}/org/mortbay/util/jmx/MANIFEST.MF"/>
    <touch file="${build.classes}/org/mortbay/j2ee/MANIFEST.MF"/>
    <touch file="${build.classes}/org/mortbay/j2ee/session/ejb/MANIFEST.MF"/>

  </target>

  <!-- Compile etc files (manifests and such) -->
  <target name="compile-etc" depends="init">
    <mkdir dir="${build.etc}"/>
    <copy todir="${build.etc}" filtering="yes">
      <fileset dir="${source.etc}">
         <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <!-- Compile resource files -->
  <target name="compile-resources" depends="init">
    <mkdir dir="${build.resources}"/>
    <copy todir="${build.resources}" filtering="yes">
      <fileset dir="${source.resources}">
         <include name="**/*"/>
      </fileset>
    </copy>
  </target>


  <!-- ================================================================== -->
  <!-- Archives                                                           -->
  <!-- ================================================================== -->

  <!--
     | Build all jar files.
   -->

  <target name="jars"
	  description="Build the Service Archive"
	  depends="compile">
    <mkdir dir="${build.lib}"/>

    <!-- Build Jetty and JettyExtra jars -->

    <jar jarfile="${build.lib}/${servlet.jar}">
      <fileset dir="${build.classes}">
        <include name="javax/servlet/**"/>
      </fileset>
    </jar>
    <jar jarfile="${build.lib}/${jetty.jar}"
         manifest="${build.classes}/org/mortbay/jetty/MANIFEST.MF">
      <fileset dir="${build.classes}">
       <include name="org/mortbay/**"/>
       <exclude name="**/jmx/**" />
       <exclude name="org/mortbay/j2ee/**"/>
       <exclude name="**/MANIFEST.MF" />
       <exclude name="**/webdefault.xml" />
      </fileset>
    </jar>
    <jar jarfile="${build.lib}/${jmx.jar}"
         manifest="${build.classes}/org/mortbay/util/jmx/MANIFEST.MF">
      <fileset dir="${build.classes}">
       <include name="org/mortbay/**/jmx/**"/>
       <exclude name="**/MANIFEST.MF" />
      </fileset>
    </jar>

    <jar jarfile="${build.lib}/${j2ee.jar}"
         manifest="${build.classes}/org/mortbay/j2ee/MANIFEST.MF">
      <fileset dir="${build.classes}">
       <include name="org/mortbay/j2ee/**"/>
<!--
       <exclude name="org/mortbay/j2ee/session/interfaces/**" />
-->
       <exclude name="org/mortbay/j2ee/session/ejb/**" />
       <exclude name="**/MANIFEST.MF" />
      </fileset>
    </jar>
    <!-- Build ${jboss.jetty.jar} -->
    <jar jarfile="${build.lib}/${jboss.jetty.jar}">
      <fileset dir="${build.classes}">
       <include name="org/jboss/**"/>
      </fileset>
    </jar>
    <!-- Build ${jetty.ejb.jar} -->
    <jar jarfile="${build.lib}/${jetty.ejb.jar}"
         manifest="${build.classes}/org/mortbay/j2ee/session/ejb/MANIFEST.MF">
      <fileset dir="${build.classes}">
        <include name="org/mortbay/j2ee/session/ejb/*.class"/>
<!--
        <include name="org/mortbay/j2ee/session/interfaces/*.class"/>
-->
        <exclude name="**/MANIFEST.MF" />
      </fileset>
      <fileset dir="${module.output}">
        <include name="META-INF/*.xml"/>
      </fileset>
    </jar>
    <jar jarfile="${build.lib}/${module.name}.sar" manifest="${build.etc}/default.mf">
      <!-- Jetty plugin classes -->

      <fileset dir="${source.java}/org/mortbay/jetty/servlet/">
        <include name="webdefault.xml"/>
      </fileset>

      <!-- jboss-service.xml for jetty plugin -->
      <fileset dir="${build.resources}/jetty-plugin">
        <include name="**/*"/>
      </fileset>
      <!--include jars in sar-->
      <fileset dir="${build.lib}">
        <!-- For some reason jasper doesn't work if servlet and jasper are in the sar -->
        <!--include name="${servlet.jar}"/-->
        <include name="${jetty.jar}"/>
        <include name="${jmx.jar}"/>
        <include name="${j2ee.jar}"/>
        <!--
        <include name="${jetty.ejb.jar}"/>
          -->
        <include name="${jboss.jetty.jar}"/>
      </fileset>
      <fileset dir="${module.ext}">
       <include name="*.jar"/>
       <!-- Do not include the JSSE classes as this conflicts with the jsse.jar -->
       <exclude name="com.sun.net.ssl.jar" />
      </fileset>
    </jar>

  </target>

<target name="devel" depends="jars"
	description="Deploy and Test the Jetty plugin">

    <property name="jboss.version"
	      value="jboss-3.2.0RC4"/>
    <property name="hack.project.deploy"
	      value="${project.root}/build/output/${jboss.version}/server/default/deploy"/>
    <property name="hack.project.lib.ext"
	      value="${project.root}/build/output/${jboss.version}/lib/ext"/>

<!--
    <delete>
      <fileset dir="${project.root}/build/output">
         <include name="**/deploy/jbosstest-web.ear"/>
      </fileset>
    </delete>
 -->

    <echo>Undeploying old Jetty plugin...</echo>
    <delete>
      <fileset dir="${project.root}/build/output">
         <include name="**/deploy/${module.name}.sar"/>
         <include name="**/deploy/${jetty.ejb.jar}"/>
      </fileset>
    </delete>

    <echo>Deploying new Jetty plugin...</echo>

    <copy todir="${hack.project.lib.ext}" filtering="no">
      <fileset dir="${build.lib}">
         <include name="${servlet.jar}"/>
      </fileset>
    </copy>

    <copy file="${build.lib}/${jetty.ejb.jar}" tofile="${hack.project.deploy}/jbossweb-ejb.jar" filtering="no"/>

    <delete dir="${hack.project.deploy}/jbossweb.sar"/>
    <mkdir dir="${hack.project.deploy}/jbossweb.sar"/>
    <unjar src="${build.lib}/${module.name}.sar"
           dest="${hack.project.deploy}/jbossweb.sar"/>
    <touch file="${hack.project.deploy}/jbossweb.sar/META-INF/jboss-service.xml"/>


<!--
    <sleep seconds="5"/>
    <antcall target="testsuite"/>
 -->

<!--
    <copy file="../../testsuite/output/lib/jbosstest-web.ear"
          todir="${hack.project.deploy}"
          filtering="no"/>
 -->

</target>

<target name="testsuite">
    <exec dir="../testsuite/"
	  executable="/bin/sh"
	  >
      <arg value="./build.sh"/>
      <arg value="-emacs"/>
      <arg value="-Djavac.debug=true"/>
      <arg value="-Dtest=org.jboss.test.web.test.WebIntegrationUnitTestCase"/>
      <arg value="one-test"/>
    </exec>
</target>


  <!-- ================================================================== -->
  <!-- Documents                                                          -->
  <!-- ================================================================== -->

  <!--
     | Create all generated documenation.
     |
     | This target should depend on other docs-* targets for each
     | different type of docuementation that is to be generated.
   -->

  <target name="docs" depends="init, docs-api"
	  description="Builds all documentation.">
  </target>

  <!-- Javadocs is an exception, but provide a docs-api to conform. -->
  <target name="docs-api" depends="docs-javadocs"/>

  <!--
     | Check if we need to build javadocs
     |
     | Javadocs will only be generated if one or more .java source files
     | is newer than the generated index.html.
   -->

  <target name="docs-javadocs-check" depends="init">
    <!-- if index.html is newer than the sources we are up to date -->
    <uptodate property="docs-javadocs.disable"
	      targetfile="${build.api}/index.html">
      <srcfiles dir="${source.java}" includes="**/*.java"/>
    </uptodate>
  </target>

  <!-- Generate Javadoc if we are out of date -->
  <target name="docs-javadocs" depends="docs-javadocs-check,compile-bean-sources" unless="docs-javadocs.disable">
    <mkdir dir="${build.api}"/>
    <javadoc packagenames="${javadoc.packages}"
             destdir="${build.api}"
             classpathref="javadoc.classpath"
             windowtitle="${javadoc.windowtitle}"
	     splitindex="${javadoc.splitindex}"
             doctitle="${javadoc.doctitle}"
             author="${javadoc.author}"
             version="${javadoc.version}"
             public="${javadoc.public}"
             package="${javadoc.package}"
             protected="${javadoc.protected}"
             private="${javadoc.private}"
             use="${javadoc.use}"
	     verbose="${javadoc.verbose}">
      <group title="JDBC Extension" packages="javax.sql*"/>
      <group title="J2EE" packages="javax*"/>
      <fileset dir="${source.java}">
       <include name="**/*.java"/>
      </fileset>
      <fileset dir="${build.ejb}">
       <include name="**/*.java"/>
      </fileset>
      <fileset dir="${build.src}">
       <include name="**/*.java"/>
      </fileset>
    </javadoc>
  <!-- generate todo docs -->
    <mkdir dir="${build.todo}"/>
    <docdoclet
     destdir="${build.todo}">
     <fileset dir="${source.java}">
      <include name="org/mortbay/j2ee/**"/>
      <include name="org/jboss/jetty/**"/>
     </fileset>
     <fileset dir="${build.ejb}">
      <include name="**/*.java"/>
     </fileset>
     <fileset dir="${build.src}">
      <include name="**/*.java"/>
     </fileset>
     <info/>
    </docdoclet>
  </target>

  <target name="javadocs" depends="docs-javadocs"/>


  <!-- ================================================================== -->
  <!-- Install & Release                                                  -->
  <!-- ================================================================== -->

  <target name="install"
	  description="Install the structure for a release."
	  depends="all, _buildmagic:install:default"/>

  <target name="release" depends="install"/>

  <target name="release-zip"
	  description="Builds a ZIP distribution."
	  depends="release, _buildmagic:release:zip"/>

  <target name="release-tar"
	  description="Builds a TAR distribution."
	  depends="release, _buildmagic:release:tar"/>

  <target name="release-tgz"
	  description="Builds a TAR-GZ distribution."
	  depends="release, _buildmagic:release:tgz"/>

  <target name="release-all"
	  description="Builds a distribution for each archive type."
	  depends="release-zip, release-tgz"/>


  <!-- ================================================================== -->
  <!-- Cleaning                                                           -->
  <!-- ================================================================== -->

  <!-- Clean up all build output -->
  <target name="clean"
	  description="Cleans up most generated files."
	  depends="_buildmagic:clean">
  </target>

  <!-- Clean up all generated files -->
  <target name="clobber"
	  description="Cleans up all generated files."
	  depends="_buildmagic:clobber, clean">
  </target>

  <!-- ================================================================== -->
  <!-- Misc.                                                              -->
  <!-- ================================================================== -->

  <target name="main"
	  description="Executes the default target (most)."
	  depends="most"/>

  <target name="all"
	  description="Builds everything."
	  depends="jars, docs"/>

  <target name="most"
	  description="Builds almost everything."
	  depends="jars"/>

  <target name="help"
          description="Show this help message."
	  depends="_buildmagic:help:standard"/>

</project>
