<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project [
  <!ENTITY buildmagic SYSTEM "resource://org/jboss/tools/buildmagic/common.xml">
]>

<!-- ====================================================================== -->
<!--                                                                        -->
<!--  JBoss, the OpenSource J2EE webOS                                      -->
<!--                                                                        -->
<!--  Distributable under LGPL license.                                     -->
<!--  See terms of license at http://www.gnu.org.                           -->
<!--                                                                        -->
<!-- ====================================================================== -->

<!-- $Id: build.xml,v 1.1.1.1 2002/11/16 03:16:49 mikechen Exp $ -->

<project default="main" name="JBoss/Tomcat-4">

  <!--
     | Include the common Buildmagic elements.
     |
     | This defines several different targets, properties and paths.
     | It also sets up the basic extention tasks amoung other things.
   -->

  &buildmagic;

  <!--
     | Initialize the build system.  Must depend on '_buildmagic:init'.
     | Other targets should depend on 'init' or things will mysteriously fail.
   -->
  <target name="init" unless="init.disable" depends="_buildmagic:init">
  </target>

  <!--
     | Configure the build system.
     |
     | This target is invoked by the Buildmagic initialization logic and
     | should contain module specific configuration elements.
   -->
  <target name="configure" unless="configure.disable">

    <!-- Module name(s) & version -->
    <property name="module.name" value="tomcat4"/>
    <property name="module.Name" value="JBoss Tomcat4 Plugin"/>
    <property file="module.version" />

    <!-- Java API for XML Processing (JAXP) -->
    <property name="sun.jaxp.root" value="${project.thirdparty}/sun/jaxp"/>
    <property name="sun.jaxp.lib" value="${sun.jaxp.root}/lib"/>
    <path id="sun.jaxp.classpath">
      <fileset dir="${sun.jaxp.lib}">
        <include name="*.jar"/>
      </fileset>
    </path>

    <!-- Java Authentication and Authorization Service (JAAS) -->
    <property name="sun.jaas.root" value="${project.thirdparty}/sun/jaas"/>
    <property name="sun.jaas.lib" value="${sun.jaas.root}/lib"/>
    <path id="sun.jaas.classpath">
      <pathelement path="${sun.jaas.lib}/jaas.jar"/>
    </path>

    <!-- Java Secure Socket Extension (JSSE) -->
    <property name="sun.jsse.root" value="${project.thirdparty}/sun/jsse"/>
    <property name="sun.jsse.lib" value="${sun.jsse.root}/lib"/>
    <path id="sun.jsse.classpath">
      <fileset dir="${sun.jsse.lib}">
        <include name="*.jar"/>
      </fileset>
    </path>

    <!-- Log4j -->
    <property name="apache.log4j.root" value="${project.thirdparty}/apache/log4j"/>
    <property name="apache.log4j.lib" value="${apache.log4j.root}/lib"/>
    <path id="apache.log4j.classpath">
      <pathelement path="${apache.log4j.lib}/log4j.jar"/>
    </path>

    <!-- JUnit -->
    <property name="junit.junit.root" value="${project.thirdparty}/junit/junit"/>
    <property name="junit.junit.lib" value="${junit.junit.root}/lib"/>
    <path id="junit.junit.classpath">
      <pathelement path="${junit.junit.lib}/junit.jar"/>
    </path>

    <!-- The combined library classpath -->
    <path id="library.classpath">
      <path refid="sun.jaxp.classpath"/>
      <path refid="sun.jaas.classpath"/>
      <path refid="sun.jsse.classpath"/>
      <path refid="apache.log4j.classpath"/>
      <path refid="junit.junit.classpath"/>
    </path>

    <!-- ======= -->
    <!-- Modules -->
    <!-- ======= -->

    <!-- J2EE -->
    <property name="jboss.j2ee.root" value="${project.root}/j2ee/output"/>
    <property name="jboss.j2ee.lib" value="${jboss.j2ee.root}/lib"/>
    <path id="jboss.j2ee.classpath">
      <pathelement path="${jboss.j2ee.lib}/jboss-j2ee.jar"/>
    </path>

    <!-- Common -->
    <property name="jboss.common.root" value="${project.root}/common/output"/>
    <property name="jboss.common.lib" value="${jboss.common.root}/lib"/>
    <path id="jboss.common.classpath">
      <pathelement path="${jboss.common.lib}/jboss-common.jar"/>
    </path>

    <!-- System -->
    <property name="jboss.system.root" value="${project.root}/system/output"/>
    <property name="jboss.system.lib" value="${jboss.system.root}/lib"/>
    <path id="jboss.system.classpath">
      <pathelement path="${jboss.system.lib}/jboss-system.jar"/>
    </path>

    <!-- Server -->
    <property name="jboss.server.root" value="${project.root}/server/output"/>
    <property name="jboss.server.lib" value="${jboss.server.root}/lib"/>
    <path id="jboss.server.classpath">
      <pathelement path="${jboss.server.lib}/jboss.jar"/>
      <pathelement path="${project.root}/security/output/lib/jbosssx.jar"/>
    </path>

    <!-- JMX -->
    <property name="jboss.jmx.root" value="${project.root}/jmx/output"/>
    <property name="jboss.jmx.lib" value="${jboss.jmx.root}/lib"/>
    <path id="jboss.jmx.classpath">
      <pathelement path="${jboss.jmx.lib}/jboss-jmx.jar"/>
    </path>

    <!-- Cluster -->
    <property name="jboss.cluster.root" value="${project.root}/cluster/output"/>
    <property name="jboss.cluster.lib" value="${jboss.cluster.root}/lib"/>
    <path id="jboss.cluster.classpath">
      <pathelement path="${jboss.cluster.root}/classes"/>
    </path>

    <!-- This corresponds to the tomcat4 dist existing in this module root -->
    <property name="tomcat.server.root" value="${module.root}/jakarta-tomcat"/>
    <available property="tomcat.dist.exists" file="${tomcat.server.root}" />
    <path id="tomcat.server.classpath">
      <pathelement path="${tomcat.server.root}/bin/bootstrap.jar"/>
      <pathelement path="${tomcat.server.root}/common/lib/servlet.jar"/>
      <pathelement path="${tomcat.server.root}/common/lib/naming-resources.jar"/>
      <pathelement path="${tomcat.server.root}/server/lib/catalina.jar"/>
      <pathelement path="${tomcat.server.root}/server/lib/commons-digester.jar"/>
    </path>


    <!-- The combined dependent module classpath -->
    <path id="dependentmodule.classpath">
      <path refid="jboss.j2ee.classpath"/>
      <path refid="jboss.system.classpath"/>
      <path refid="jboss.server.classpath"/>
      <path refid="jboss.common.classpath"/>
      <path refid="jboss.jmx.classpath"/>
      <path refid="jboss.cluster.classpath"/>
      <path refid="tomcat.server.classpath"/>
    </path>

    <!-- Where source files live -->
    <property name="source.java" value="${module.source}/main"/>
    <property name="source.etc" value="${module.source}/etc"/>
    <property name="source.resources" value="${module.source}/resources"/>

    <!-- Where build generated files will go -->
    <property name="build.classes" value="${module.output}/classes"/>
    <property name="build.deploy" value="${module.output}/deploy"/>
    <property name="build.lib" value="${module.output}/lib"/>
    <property name="build.api" value="${module.output}/api"/>
    <property name="build.etc" value="${module.output}/etc"/>
    <property name="build.ejb" value="${module.output}/ejb"/>
    <property name="build.metadata" value="${module.output}/META-INF"/>
    <property name="build.reports" value="${module.output}/reports"/>
    <property name="build.resources" value="${module.output}/resources"/>

    <!-- Install/Release structure -->
    <property name="install.id" value="${module.name}-${module.version}"/>
    <property name="release.id" value="${install.id}"/>
    <property name="install.root" value="${module.output}/${install.id}"/>

    <!-- The combined thirdparty classpath -->
    <path id="thirdparty.classpath">
      <path refid="library.classpath"/>
      <path refid="dependentmodule.classpath"/>
    </path>

    <!-- This module is based on Java 1.2 -->
    <property name="javac.target" value="1.2"/>

    <!-- classpath and local.classpath must have a value using with a path -->
    <property name="classpath" value=""/>
    <property name="local.classpath" value=""/>

    <!-- The classpath required to build classes. -->
    <path id="javac.classpath">
      <pathelement path="${classpath}"/>
      <pathelement path="${local.classpath}"/>
      <path refid="thirdparty.classpath"/>
    </path>

    <!-- The classpath required to build javadocs. -->
    <path id="javadoc.classpath">
      <path refid="javac.classpath"/>
    </path>

    <!-- Packages to include when generating api documentation -->
    <property name="javadoc.packages" value="org.jboss.*"/>

  </target>


  <!--
     |  Compile everything.
     |
     |  This target should depend on other compile-* targets for each
     |  different type of compile that needs to be performed, short of
     |  documentation compiles.
    -->
  <target name="compile" if="tomcat.dist.exists"
	  depends="compile-classes, compile-resources, compile-etc"
	  description="Compile all source files."/>

  <!-- Compile all class files -->
  <target name="compile-classes" if="tomcat.dist.exists" depends="init">
    <mkdir dir="${build.classes}"/>
    <javac destdir="${build.classes}"
           optimize="${javac.optimize}"
	   target="${javac.target}"
           debug="${javac.debug}"
	   depend="${javac.depend}"
	   verbose="${javac.verbose}"
	   deprecation="${javac.deprecation}"
	   includeAntRuntime="${javac.include.ant.runtime}"
	   includeJavaRuntime="${javac.include.java.runtime}"
	   failonerror="${javac.fail.onerror}">
       <src path="${source.java}"/>
       <classpath refid="javac.classpath"/>
    </javac>

  </target>

  <!-- Compile resource files -->
  <target name="compile-resources" depends="init">
    <mkdir dir="${build.resources}"/>
    <copy todir="${build.resources}" filtering="yes">
      <fileset dir="${source.resources}">
         <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <!-- Compile manifests -->
  <target name="compile-etc" depends="init">
    <mkdir dir="${build.etc}/manifest"/>
    <!-- Copy with filtering to replace the following tokens that are
         used to make up the jar manifest version information.
     -->
    <filter token="version.major" value="${version.major}"/>
    <filter token="version.minor" value="${version.minor}"/>
    <filter token="version.revision" value="${version.revision}"/>
    <filter token="version.tag" value="${version.tag}"/>
    <filter token="version.name" value="${version.name}"/>
    <copy todir="${build.etc}/manifest" filtering="yes">
      <fileset dir="${project.root}/build/etc">
         <include name="version.mf"/>
      </fileset>
    </copy>
  </target>

  <!--
     | Build all jar files.
   -->
  <target name="jars" if="tomcat.dist.exists"
	  description="Build the Service Archive"
	  depends="compile">

    <mkdir dir="${build.lib}" />

    <!-- Build the Tomcat service jars -->

    <copy file="${build.resources}/jboss-service.xml"
       tofile="${build.deploy}/tomcat41-service.xml" />

    <jar jarfile="${build.deploy}/tomcat41-service.jar"
         manifest="${build.etc}/manifest/version.mf">
      <!-- The service classes -->
      <fileset dir="${build.classes}">
        <include name="org/jboss/**"/>
      </fileset>
      
      <!-- Get the property-files -->
      <fileset dir="${source.java}">
        <include name="org/jboss/**/*.properties"/>
      </fileset>
    </jar>
  </target>

  <!-- ================================================================== -->
  <!-- Install & Release                                                  -->
  <!-- ================================================================== -->

  <target name="install" if="tomcat.dist.exists"
	  description="Install the structure for a release."
	  depends="most, _buildmagic:install:default"/>

  <target name="release" depends="install"/>

  <target name="release-zip"
	  description="Builds a ZIP distribution."
	  depends="release, _buildmagic:release:zip"/>

  <target name="release-tar"
	  description="Builds a TAR distribution."
	  depends="release, _buildmagic:release:tar"/>

  <target name="release-tgz"
	  description="Builds a TAR-GZ distribution."
	  depends="release, _buildmagic:release:tgz"/>

  <target name="release-all"
	  description="Builds a distribution for each archive type."
	  depends="release-zip, release-tgz"/>


  <!-- ================================================================== -->
  <!-- Cleaning                                                           -->
  <!-- ================================================================== -->

  <!-- Clean up all build output -->
  <target name="clean"
	  description="Cleans up most generated files."
	  depends="_buildmagic:clean">
  </target>

  <!-- Clean up all generated files -->
  <target name="clobber"
	  description="Cleans up all generated files."
	  depends="_buildmagic:clobber, clean">
  </target>

  <!-- ================================================================== -->
  <!-- Misc.                                                              -->
  <!-- ================================================================== -->

  <target name="main" depends="most"
     description="Executes the default target (most)."/>

  <target name="most" if="tomcat.dist.exists"
	  description="Executes the default target (jars)."
	  depends="jars" />

  <!-- The normal JBoss build has to been performed to create 
  -->
  <target name="bundle" if="tomcat.dist.exists"
	  description="Builds the tomcat service and creates a bundled dist"
	  depends="jars">
    <property name="jboss-dist" value="jboss-${module.version}" />
    <property name="jboss-conf" value="output/${jboss-dist}/server/default/conf" />
    <property name="jboss-all" value="output/${jboss-dist}/server/all/deploy" />
    <property name="jboss-default" value="output/${jboss-dist}/server/default/deploy" />

    <!-- Copy the tomcat dist to the bundle directory -->
    <copy todir="output/${jboss-dist}/tomcat-4.1.x">
       <fileset dir="${tomcat.server.root}" />
    </copy>
    <!-- Copy the jboss dist to the bundle directory and exclude the default
      jbossweb.sar servlet container
    -->
    <copy todir="output/${jboss-dist}">
       <fileset dir="${project.root}/build/output/${jboss-dist}">
         <exclude name="**/jbossweb.sar/**" />
       </fileset>
    </copy>
    <!-- Install the emedded tomcat service into the all and default configs -->
    <copy file="output/deploy/tomcat41-service.xml" todir="${jboss-all}" />
    <copy file="output/deploy/tomcat41-service.jar" todir="${jboss-all}" />
    <copy file="output/deploy/tomcat41-service.xml" todir="${jboss-default}" />
    <copy file="output/deploy/tomcat41-service.jar" todir="${jboss-default}" />
  </target>

  <target name="help"
          description="Show this help message."
	  depends="_buildmagic:help:standard"/>

</project>

