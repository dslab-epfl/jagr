<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project [
  <!ENTITY buildmagic SYSTEM "resource://org/jboss/tools/buildmagic/common.xml">
]>

<!-- ====================================================================== -->
<!--                                                                        -->
<!--  JBoss, the OpenSource J2EE webOS                                      -->
<!--                                                                        -->
<!--  Distributable under LGPL license.                                     -->
<!--  See terms of license at http://www.gnu.org.                           -->
<!--                                                                        -->
<!-- ====================================================================== -->

<!-- $Id: build.xml,v 1.1.1.1 2002/11/16 03:16:42 mikechen Exp $ -->


<project default="main" name="JBoss/Varia">

  <!-- ================================================================== -->
  <!-- Setup                                                              -->
  <!-- ================================================================== -->

  <!--
     | Include the common Buildmagic elements.
     |
     | This defines several different targets, properties and paths.
     | It also sets up the basic extention tasks amoung other things.
   -->

  &buildmagic;


  <!-- ================================================================== -->
  <!-- Initialization                                                     -->
  <!-- ================================================================== -->

  <!--
     | Initialize the build system.  Must depend on '_buildmagic:init'.  
     | Other targets should depend on 'init' or things will mysteriously fail.
   -->

  <target name="init" unless="init.disable" depends="_buildmagic:init">
  </target>


  <!-- ================================================================== -->
  <!-- Configuration                                                      -->
  <!-- ================================================================== -->

  <!--
     | Configure the build system.  
     |
     | This target is invoked by the Buildmagic initialization logic and 
     | should contain module specific configuration elements.
   -->

  <target name="configure" unless="configure.disable">

    <!-- =================== -->
    <!-- Basic Configuration -->
    <!-- =================== -->

    <!-- Module name(s) & version -->
    <property name="module.name" value="varia"/>
    <property name="module.Name" value="Various"/>
    <property name="module.version" value="DEV"/>

    <!-- ========= -->
    <!-- Libraries -->
    <!-- ========= -->

    <!-- Java API for XML Processing (JAXP) -->
    <property name="sun.jaxp.root" value="${project.thirdparty}/sun/jaxp"/>
    <property name="sun.jaxp.lib" value="${sun.jaxp.root}/lib"/>
    <path id="sun.jaxp.classpath">
      <fileset dir="${sun.jaxp.lib}">
        <include name="*.jar"/>
      </fileset>
    </path>

    <!-- Java Authentication and Authorization Service (JAAS) -->
    <property name="sun.jaas.root" value="${project.thirdparty}/sun/jaas"/>
    <property name="sun.jaas.lib" value="${sun.jaas.root}/lib"/>
    <path id="sun.jaas.classpath">
      <pathelement path="${sun.jaas.lib}/jaas.jar"/>
    </path>

    <!-- JavaBeans Activation Framework (JAF) -->
    <property name="sun.jaf.root" value="${project.thirdparty}/sun/jaf"/>
    <property name="sun.jaf.lib" value="${sun.jaf.root}/lib"/>
    <path id="sun.jaf.classpath">
      <pathelement path="${sun.jaf.lib}/activation.jar"/>
    </path>

    <!-- JavaMail -->
    <property name="sun.javamail.root" value="${project.thirdparty}/sun/javamail"/>
    <property name="sun.javamail.lib" value="${sun.javamail.root}/lib"/>
    <path id="sun.javamail.classpath">
      <pathelement path="${sun.javamail.lib}/mail.jar"/>
    </path>

    <!-- Java Transaction Service (JTS) -->
    <property name="sun.jts.root" value="${project.thirdparty}/sun/jts"/>
    <property name="sun.jts.lib" value="${sun.jts.root}/lib"/>
    <path id="sun.jts.classpath">
      <pathelement path="${sun.jts.lib}/jts.jar"/>
    </path>

    <!-- Java Servlets -->
    <property name="sun.servlet.root" value="${project.thirdparty}/sun/servlet"/>
    <property name="sun.servlet.lib" value="${sun.servlet.root}/lib"/>
    <path id="sun.servlet.classpath">
      <pathelement path="${sun.servlet.lib}/servlet.jar"/>
    </path>

    <!-- Log4j -->
    <property name="apache.log4j.root" value="${project.thirdparty}/apache/log4j"/>
    <property name="apache.log4j.lib" value="${apache.log4j.root}/lib"/>
    <path id="apache.log4j.classpath">
      <pathelement path="${apache.log4j.lib}/log4j.jar"/>
    </path>

    <!-- GNU Regex -->
    <property name="gnu.regexp.root" value="${project.thirdparty}/gnu/regexp"/>
    <property name="gnu.regexp.lib" value="${gnu.regexp.root}/lib"/>
    <path id="gnu.regexp.classpath">
      <pathelement path="${gnu.regexp.lib}/gnu-regexp.jar"/>
    </path>

    <!-- EDU.oswego.cs.dl.util.concurrent -->
    <property name="oswego.concurrent.root" value="${project.thirdparty}/oswego/concurrent"/>
    <property name="oswego.concurrent.lib" value="${oswego.concurrent.root}/lib"/>
    <path id="oswego.concurrent.classpath">
      <pathelement path="${oswego.concurrent.lib}/concurrent.jar"/>
    </path>

    <!-- JPL-Util -->
    <property name="gjt.jpl-util.root" value="${project.thirdparty}/gjt/jpl-util"/>
    <property name="gjt.jpl-util.lib" value="${gjt.jpl-util.root}/lib"/>
    <path id="gjt.jpl-util.classpath">
      <fileset dir="${gjt.jpl-util.lib}">
        <include name="*.jar"/>
      </fileset>
    </path>

    <!-- JUnit -->
    <property name="junit.junit.root" value="${project.thirdparty}/junit/junit"/>
    <property name="junit.junit.lib" value="${junit.junit.root}/lib"/>
    <path id="junit.junit.classpath">
      <pathelement path="${junit.junit.lib}/junit.jar"/>
    </path>

    <!-- Hypersonic SQL -->
    <property name="hsqldb.hsqldb.root" value="${project.thirdparty}/hsqldb/hsqldb"/>
    <property name="hsqldb.hsqldb.lib" value="${hsqldb.hsqldb.root}/lib"/>
    <path id="hsqldb.hsqldb.classpath">
      <pathelement path="${hsqldb.hsqldb.lib}/hsqldb.jar"/>
    </path>

    <!-- Castor -->
    <property name="exolab.castor.root" value="${project.thirdparty}/exolab/castor"/>
    <property name="exolab.castor.lib" value="${exolab.castor.root}/lib"/>
    <path id="exolab.castor.classpath">
      <pathelement path="${exolab.castor.lib}/castor.jar"/>
    </path>

    <!-- Tyrex -->
    <property name="exolab.tyrex.root" value="${project.thirdparty}/exolab/tyrex"/>
    <property name="exolab.tyrex.lib" value="${exolab.tyrex.root}/lib"/>
    <path id="exolab.tyrex.classpath">
      <pathelement path="${exolab.tyrex.lib}/tyrex.jar"/>
    </path>

    <!-- Ant -->
    <property name="apache.ant.root" value="${project.tools}"/>
    <property name="apache.ant.lib" value="${apache.ant.root}/lib"/>
    <path id="apache.ant.classpath">
      <pathelement path="${apache.ant.lib}/ant.jar"/>
    </path>
 
    <!-- The combined library classpath -->
    <path id="library.classpath">
      <path refid="sun.jaxp.classpath"/>
      <path refid="sun.jaas.classpath"/>
      <path refid="sun.jaf.classpath"/>
      <path refid="sun.javamail.classpath"/>
      <path refid="sun.jts.classpath"/>
      <path refid="sun.servlet.classpath"/>
      <path refid="apache.log4j.classpath"/>
      <path refid="gnu.regexp.classpath"/>
      <path refid="junit.junit.classpath"/>
      <path refid="hsqldb.hsqldb.classpath"/>
      <path refid="exolab.castor.classpath"/>
      <path refid="exolab.tyrex.classpath"/>
      <path refid="apache.ant.classpath"/>
    </path>

    <!-- ======= -->
    <!-- Modules -->
    <!-- ======= -->

    <!-- J2EE -->
    <property name="jboss.j2ee.root" value="${project.root}/j2ee/output"/>
    <property name="jboss.j2ee.lib" value="${jboss.j2ee.root}/lib"/>
    <path id="jboss.j2ee.classpath">
      <pathelement path="${jboss.j2ee.lib}/jboss-j2ee.jar"/>
    </path>

    <!-- Common -->
    <property name="jboss.common.root" value="${project.root}/common/output"/>
    <property name="jboss.common.lib" value="${jboss.common.root}/lib"/>
    <path id="jboss.common.classpath">
      <pathelement path="${jboss.common.lib}/jboss-common.jar"/>
    </path>

    <!-- System -->
    <property name="jboss.system.root" value="${project.root}/system/output"/>
    <property name="jboss.system.lib" value="${jboss.system.root}/lib"/>
    <path id="jboss.system.classpath">
      <pathelement path="${jboss.system.lib}/jboss-system.jar"/>
    </path>

    <!-- JMX -->
    <property name="jboss.jmx.root" value="${project.root}/jmx/output"/>
    <property name="jboss.jmx.lib" value="${jboss.jmx.root}/lib"/>
    <path id="jboss.jmx.classpath">
      <pathelement path="${jboss.jmx.lib}/jboss-jmx.jar"/>
    </path>

    <!-- Naming -->
    <property name="jboss.naming.root" value="${project.root}/naming/output"/>
    <property name="jboss.naming.lib" value="${jboss.naming.root}/lib"/>
    <path id="jboss.naming.classpath">
      <pathelement path="${jboss.naming.lib}/jnpserver.jar"/>
    </path>

    <!-- Server -->
    <property name="jboss.server.root" value="${project.root}/server/output"/>
    <property name="jboss.server.lib" value="${jboss.server.root}/lib"/>
    <path id="jboss.server.classpath">
      <pathelement path="${jboss.server.lib}/jboss.jar"/>
      <pathelement path="${jboss.server.lib}/jmx-rmi-connector-client.jar"/>
    </path>

    <!-- Management -->
    <property name="jboss.management.root" value="${project.root}/management/output"/>
    <property name="jboss.management.lib" value="${jboss.management.root}/lib"/>
    <path id="jboss.management.classpath">
      <pathelement path="${jboss.management.lib}/jboss-jsr77.jar"/>
      <pathelement path="${jboss.management.lib}/jboss-management.jar"/>
    </path>

    <!-- The combined dependent module classpath -->
    <path id="dependentmodule.classpath">
      <path refid="jboss.j2ee.classpath"/>
      <path refid="jboss.common.classpath"/>
      <path refid="jboss.system.classpath"/>
      <path refid="jboss.jmx.classpath"/>
      <path refid="jboss.naming.classpath"/>
      <path refid="jboss.server.classpath"/>
      <path refid="jboss.management.classpath"/>
    </path>

    <!-- ===== -->
    <!-- Tasks -->
    <!-- ===== -->

    <!-- Where source files live -->
    <property name="source.java" value="${module.source}/main"/>
    <property name="source.etc" value="${module.source}/etc"/>
    <property name="source.resources" value="${module.source}/resources"/>

    <!-- Where build generated files will go -->
    <property name="build.classes" value="${module.output}/classes"/>
    <property name="build.lib" value="${module.output}/lib"/>
    <property name="build.api" value="${module.output}/api"/>
    <property name="build.etc" value="${module.output}/etc"/>
    <property name="build.resources" value="${module.output}/resources"/>
    <property name="build.reports" value="${module.output}/reports"/>
    <property name="build.gen-src" value="${module.output}/gen-src"/>

    <!-- Install/Release structure -->
    <property name="install.id" value="${module.name}-${module.version}"/>
    <property name="release.id" value="${install.id}"/>
    <property name="install.root" value="${module.output}/${install.id}"/>

    <!-- The combined thirdparty classpath -->
    <path id="thirdparty.classpath">
      <path refid="library.classpath"/>
      <path refid="dependentmodule.classpath"/>
    </path>

    <!-- This module is based on Java 1.2 -->
    <property name="javac.target" value="1.2"/>

    <!-- RMIC should generate stubs compatible with Java 1.2+ -->
    <property name="rmic.stubVersion" value="1.2"/>

    <!-- classpath and local.classpath must have a value using with a path -->
    <property name="classpath" value=""/>
    <property name="local.classpath" value=""/>

    <!-- The classpath required to build classes. -->
    <path id="javac.classpath">
      <pathelement path="${classpath}"/>
      <pathelement path="${local.classpath}"/>
      <path refid="thirdparty.classpath"/>
    </path>

    <!-- The classpath required to build javadocs. -->
    <path id="javadoc.classpath">
      <path refid="javac.classpath"/>
    </path>

    <!-- Packages to include when generating api documentation -->
    <property name="javadoc.packages" value="org.jboss.*"/>

    <!-- Override JUnit defaults -->
    <property name="junit.timeout" value="240000"/> <!-- 4 minutes -->
    <property name="junit.batchtest.todir" value="${build.reports}"/>
    <property name="junit.jvm.options" value="-Ddummy"/>

    <!-- xdoclet -->
    <path id="xdoclet.task.classpath">
      <path refid="javac.classpath"/>
      <pathelement location="${project.tools}/lib/xdoclet.jar"/>
      <pathelement location="${project.tools}/lib/xjavadoc.jar"/>
      <pathelement location="${project.tools}/lib/ant.jar"/>
    </path>
    <property name="xdoclet.task.classpath" 
	      refid="xdoclet.task.classpath"/>

    <taskdef name="todo" 
             classname="xdoclet.doc.DocumentDocletTask"
             classpathref="xdoclet.task.classpath"/>
  </target>


  <!-- ================================================================== -->
  <!-- Compile                                                            -->
  <!-- ================================================================== -->

  <!-- 
     |  Compile everything.
     |
     |  This target should depend on other compile-* targets for each 
     |  different type of compile that needs to be performed, short of
     |  documentation compiles.
    -->
  <target name="compile" 
	  depends="compile-mbean-sources, compile-classes, compile-rmi, compile-etc, compile-resources" 
	  description="Compile all source files."/>

  <!-- Compile mbeans with XDoclet -->
  <target name="compile-mbean-sources" depends="init">
    <taskdef name="xdoclet" classname="xdoclet.jmx.JMXDocletTask"/>

    <mkdir dir="${build.gen-src}"/>
    <xdoclet sourcepath="${source.java}"
	     destdir="${build.gen-src}"
	     classpath="${xdoclet.task.classpath}"
	     excludedtags="@version,@author">
      <fileset dir="${source.java}">
        <include name="**/*.java"/>
      </fileset>
      <mbeaninterface mergedir="${project.tools}/etc/xdoclet/templates"/>
    </xdoclet>
  </target>

  <!-- Compile all class files -->
  <target name="compile-classes" depends="init">
    <mkdir dir="${build.classes}"/>
    <javac destdir="${build.classes}"
           optimize="${javac.optimize}"
	   target="${javac.target}"
           debug="${javac.debug}"
	   depend="${javac.depend}"
	   verbose="${javac.verbose}"
	   deprecation="${javac.deprecation}"
	   includeAntRuntime="${javac.include.ant.runtime}"
	   includeJavaRuntime="${javac.include.java.runtime}"
	   failonerror="${javac.fail.onerror}">
       <src path="${source.java}"/>
       <src path="${build.gen-src}"/>
       <classpath refid="javac.classpath"/>
       <include name="${javac.includes}"/>
       <exclude name="${javac.excludes}"/>
    </javac>
  </target>

  <!-- Compile RMI stubs -->
  <target name="compile-rmi" depends="compile-classes">
    <rmic base="${build.classes}"
	  verify="${rmic.verify}"
	  iiop="${rmic.iiop}"
	  iiopopts="${rmic.iiopops}"
	  idl="${rmic.idl}"
	  idlopts="${rmic.idlops}"
	  debug="${rmic.debug}"
          stubVersion="${rmic.stubVersion}">
      <classpath refid="javac.classpath"/>
      <include name="${rmic.includes}"/>
      <exclude name="${rmic.excludes}"/>
      <include name="org/jboss/tm/plugins/tyrex/CoordinatorRemote.class"/>
      <include name="org/jboss/tm/plugins/tyrex/ResourceRemote.class"/>
    </rmic>
  </target>

  <!-- Compile etc files (manifests and such) -->
  <target name="compile-etc" depends="init">
    <mkdir dir="${build.etc}"/>
    <copy todir="${build.etc}" filtering="yes">
      <fileset dir="${source.etc}">
         <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <!-- Compile resource files -->
  <target name="compile-resources" depends="init">
    <mkdir dir="${build.resources}"/>
    <copy todir="${build.resources}" filtering="yes">
      <fileset dir="${source.resources}">
         <include name="**/*"/>
      </fileset>
    </copy>
  </target>


  <!-- ================================================================== -->
  <!-- Archives                                                           -->
  <!-- ================================================================== -->

  <!-- 
     |  Build all jar files.
    -->
  <target name="jars" depends="compile" description="Builds all jar files.">
    <mkdir dir="${build.lib}"/>

    <!-- FIXME: TURN ME INTO A SAR

    <!- - Build castor-jdo-plugin.jar - ->
    <jar jarfile="${build.lib}/castor-jdo-plugin.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/jdo/castor/**"/>
      </fileset>
    </jar>

    -->

    <!-- FIXME: TURN ME INTO A SAR

    <!- - Build tyrex-tm-plugin.jar - ->
    <jar jarfile="${build.lib}/tyrex-tm-plugin.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/tm/plugins/tyrex/**"/>
      </fileset>
    </jar>

    -->

    <!-- autonumber-plugin.jar -->
    <jar jarfile="${build.lib}/autonumber-plugin.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/varia/autonumber/**"/>
      </fileset>
    </jar>

    <!-- counter-plugin.jar -->
    <jar jarfile="${build.lib}/counter-plugin.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/varia/counter/**"/>
      </fileset>
    </jar>

    <!-- scheduler-plugin.jar -->
    <jar jarfile="${build.lib}/scheduler-plugin.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/varia/scheduler/**"/>
      </fileset>
    </jar>

    <!-- scheduler-plugin-example.jar -->
    <jar jarfile="${build.lib}/scheduler-plugin-example.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/varia/scheduler/example/**"/>
      </fileset>
    </jar>

    <!-- mail-plugin.jar -->
    <jar jarfile="${build.lib}/mail-plugin.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/mail/MailService*.class"/>
      </fileset>
    </jar>

    <!-- hsqldb-plugin.jar -->
    <jar jarfile="${build.lib}/hsqldb-plugin.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/jdbc/Hypersonic**"/>
      </fileset>
    </jar>

    <!-- properties-plugin.jar -->
    <jar jarfile="${build.lib}/properties-plugin.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/varia/property/**"/>
      </fileset>
    </jar>

    <!-- process-plugin.jar -->
    <jar jarfile="${build.lib}/process-plugin.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/varia/process/**"/>
      </fileset>
    </jar>

    <!-- boot-servlet.war -->
    <war warfile="${build.lib}/boot-servlet.war"
         webxml="${source.resources}/boot/web.xml">
      <fileset dir="${source.resources}/boot">
        <include name="*.xsl"/>
      </fileset>
      <classes dir="${build.classes}">
        <include name="org/jboss/boot/**"/>
      </classes>
      <lib dir="${project.thirdparty}">
        <include name="sun/jaxp/lib/xalan.jar"/>
      </lib>
    </war>

    <!-- htmladaptor.war -->
    <war warfile="${build.lib}/htmladaptor.war"
         webxml="${source.resources}/jmx/htmladaptor-web.xml"
    >
      <webinf dir="${source.resources}/jmx/web-inf" />
      <classes dir="${build.classes}">
        <include name="org/jboss/jmx/adaptor/**"/>
      </classes>
      <classes dir="${source.resources}/jmx">
        <include name="*.properties"/>
      </classes>
      <fileset dir="${source.resources}/jmx/html" />
    </war>

    <!-- http-invoker.sar + war -->
    <war warfile="${build.lib}/http-invoker.war"
         webxml="${source.resources}/services/invoker/http/web.xml">
      <webinf dir="${build.resources}/services/invoker/http">
         <include name="jboss-web.xml" />
      </webinf>
      <classes dir="${build.classes}">
        <include name="org/jboss/invocation/http/**"/>
      </classes>
      <classes dir="${build.resources}/services/invoker/http">
        <include name="*.properties" />
      </classes>
    </war>
    <jar jarfile="${build.lib}/http-invoker.sar">
      <metainf dir="${build.resources}/services/invoker/http">
         <include name="jboss-service.xml" />
      </metainf>
      <fileset dir="${build.lib}">
        <include name="http-invoker.war"/>
      </fileset>
    </jar>


    <!-- Build jbossjmx-ant.jar -->
    <jar jarfile="${build.lib}/jbossjmx-ant.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/ant/**"/>
      </fileset>
      <fileset dir="${source.resources}/ant">
        <include name="jndi.properties"/>
      </fileset>
      <fileset dir="${jboss.naming.root}/classes">
        <include name="org/jnp/interfaces/**"/>
        <include name="org/jnp/server/*Stub.class"/>
      </fileset>
      <fileset dir="${jboss.server.root}/classes">
        <include name="org/jboss/jmx/adaptor/rmi/RMIAdaptor.class"/>
        <include name="org/jboss/jmx/adaptor/rmi/RMIAdaptorImpl_Stub.class"/>
        <include name="org/jboss/jmx/adaptor/rmi/RMIAdaptorService.class"/>
        <include name="org/jboss/jmx/connector/**"/>
      </fileset>
      <fileset dir="${jboss.jmx.root}/classes">
        <include name="javax/management/*.class"/>
      </fileset>
    </jar>


  </target>


  <!-- ================================================================== -->
  <!-- Documents                                                          -->
  <!-- ================================================================== -->

  <!-- 
     | Create all generated documenation.
     |
     | This target should depend on other docs-* targets for each 
     | different type of docuementation that is to be generated.
   -->

  <target name="docs" depends="init, docs-api" 
	  description="Builds all documentation.">
  </target>

  <!-- Javadocs is an exception, but provide a docs-api to conform. -->
  <target name="docs-api" depends="docs-javadocs"/>

  <!-- 
     | Check if we need to build javadocs 
     |
     | Javadocs will only be generated if one or more .java source files
     | is newer than the generated index.html.
   -->

  <target name="docs-javadocs-check" depends="init">
    <!-- if index.html is newer than the sources we are up to date -->
    <uptodate property="docs-javadocs.disable"
	      targetfile="${build.api}/index.html">
      <srcfiles dir="${source.java}" includes="**/*.java"/>
    </uptodate>
  </target>	      

  <!-- Generate Javadoc if we are out of date -->
  <target name="docs-javadocs" depends="docs-javadocs-check" unless="docs-javadocs.disable">
    <mkdir dir="${build.api}"/>
    <javadoc packagenames="${javadoc.packages}"
             sourcepath="${source.java}"
             destdir="${build.api}"
             classpathref="javadoc.classpath"
             windowtitle="${javadoc.windowtitle}"
	     splitindex="${javadoc.splitindex}"
             doctitle="${javadoc.doctitle}"
             author="${javadoc.author}"
             version="${javadoc.version}"
             public="${javadoc.public}"
             package="${javadoc.package}"
             protected="${javadoc.protected}"
             private="${javadoc.private}"
             use="${javadoc.use}"
	     verbose="${javadoc.verbose}"> 
      <group title="JDBC Extension" packages="javax.sql*"/>
      <group title="J2EE" packages="javax*"/>
    </javadoc>
  </target>

  <target name="javadocs" depends="docs-javadocs"/>


  <!-- ================================================================== -->
  <!-- Install & Release                                                  -->
  <!-- ================================================================== -->

  <target name="install" 
	  description="Install the structure for a release."
	  depends="all, _buildmagic:install:default"/>

  <target name="release" depends="install"/>

  <target name="release-zip" 
	  description="Builds a ZIP distribution."
	  depends="release, _buildmagic:release:zip"/>

  <target name="release-tar" 
	  description="Builds a TAR distribution."
	  depends="release, _buildmagic:release:tar"/>

  <target name="release-tgz" 
	  description="Builds a TAR-GZ distribution."
	  depends="release, _buildmagic:release:tgz"/>

  <target name="release-all"
	  description="Builds a distribution for each archive type."
	  depends="release-zip, release-tgz"/>


  <!-- ================================================================== -->
  <!-- Cleaning                                                           -->
  <!-- ================================================================== -->

  <!-- Clean up all build output -->
  <target name="clean" 
	  description="Cleans up most generated files."
	  depends="_buildmagic:clean">
  </target>

  <!-- Clean up all generated files -->
  <target name="clobber" 
	  description="Cleans up all generated files."
	  depends="_buildmagic:clobber, clean">
  </target>


  <!-- ================================================================== -->
  <!-- Misc.                                                              -->
  <!-- ================================================================== -->

  <target name="main"
	  description="Executes the default target (most)."
	  depends="most"/>
    
  <target name="all"
	  description="Builds everything."
	  depends="jars, docs"/>

  <target name="most" 
	  description="Builds almost everything."
	  depends="jars"/>

  <target name="help" 
          description="Show this help message."
	  depends="_buildmagic:help:standard"/>

</project>
