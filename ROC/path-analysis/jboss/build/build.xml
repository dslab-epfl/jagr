<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project [
  <!ENTITY buildmagic SYSTEM "resource://org/jboss/tools/buildmagic/common.xml">
]>

<!-- ====================================================================== -->
<!--                                                                        -->
<!--  JBoss, the OpenSource J2EE webOS                                      -->
<!--                                                                        -->
<!--  Distributable under LGPL license.                                     -->
<!--  See terms of license at http://www.gnu.org.                           -->
<!--                                                                        -->
<!-- ====================================================================== -->

<!-- $Id: build.xml,v 1.1.1.1 2002/11/16 03:16:39 mikechen Exp $ -->

<project default="main" name="JBoss/Build">

  <!-- ================================================================== -->
  <!-- Setup                                                              -->
  <!-- ================================================================== -->

  <!--
     | Include the common Buildmagic elements.
     |
     | This defines several different targets, properties and paths.
     | It also sets up the basic extention tasks amoung other things.
   -->

  &buildmagic;


  <!-- ================================================================== -->
  <!-- Initialization                                                     -->
  <!-- ================================================================== -->

  <!--
     | Initialize the build system.  Must depend on '_buildmagic:init'.  
     | Other targets should depend on 'init' or things will mysteriously fail.
   -->

  <target name="init" unless="init.disable" depends="_buildmagic:init">
  </target>


  <!-- ================================================================== -->
  <!-- Configuration                                                      -->
  <!-- ================================================================== -->

  <!--
     | Configure the build system.  
     |
     | This target is invoked by the Buildmagic initialization logic and 
     | should contain module specific configuration elements.
   -->

  <target name="configure" unless="configure.disable">

    <!-- =================== -->
    <!-- Basic Configuration -->
    <!-- =================== -->

    <!-- Version identifiers for the server. -->
    <property name="version.major" value="3"/>
    <property name="version.minor" value="0"/>
    <property name="version.revision" value="3"/>
    <property name="version.tag" value=""/>
    <!-- This must be set to the CVS tag for any release -->
    <property name="version.name" value="JBoss_3_0_3"/>

    <!-- Module name(s) & version -->
    <property name="module.name" value="jboss"/>
    <property name="module.Name" value="JBoss Build"/>
    <property name="module.version" value="${version.major}.${version.minor}.${version.revision}${version.tag}"/>

    <!-- ========= -->
    <!-- Libraries -->
    <!-- ========= -->

    <!-- Java Management Extensions (JMX) -->
    <property name="sun.jmx.root" value="${project.thirdparty}/sun/jmx"/>
    <property name="sun.jmx.lib" value="${sun.jmx.root}/lib"/>

    <!-- Java API for XML Processing (JAXP) -->
    <property name="sun.jaxp.root" value="${project.thirdparty}/sun/jaxp"/>
    <property name="sun.jaxp.lib" value="${sun.jaxp.root}/lib"/>

    <!-- Java Authentication and Authorization Service (JAAS) -->
    <property name="sun.jaas.root" value="${project.thirdparty}/sun/jaas"/>
    <property name="sun.jaas.lib" value="${sun.jaas.root}/lib"/>

    <!-- JavaBeans Activation Framework (JAF) -->
    <property name="sun.jaf.root" value="${project.thirdparty}/sun/jaf"/>
    <property name="sun.jaf.lib" value="${sun.jaf.root}/lib"/>

    <!-- JavaMail -->
    <property name="sun.javamail.root" value="${project.thirdparty}/sun/javamail"/>
    <property name="sun.javamail.lib" value="${sun.javamail.root}/lib"/>

    <!-- Java Transaction Service (JTS) -->
    <property name="sun.jts.root" value="${project.thirdparty}/sun/jts"/>
    <property name="sun.jts.lib" value="${sun.jts.root}/lib"/>

    <!-- Log4j -->
    <property name="apache.log4j.root" value="${project.thirdparty}/apache/log4j"/>
    <property name="apache.log4j.lib" value="${apache.log4j.root}/lib"/>

    <!-- BCEL -->
    <property name="apache.bcel.root" value="${project.thirdparty}/apache/bcel"/>
    <property name="apache.bcel.lib" value="${apache.bcel.root}/lib"/>

    <!-- EDU.oswego.cs.dl.util.concurrent -->
    <property name="oswego.concurrent.root" value="${project.thirdparty}/oswego/concurrent"/>
    <property name="oswego.concurrent.lib" value="${oswego.concurrent.root}/lib"/>

    <!-- JPL-Util -->
    <property name="gjt.jpl-util.root" value="${project.thirdparty}/gjt/jpl-util"/>
    <property name="gjt.jpl-util.lib" value="${gjt.jpl-util.root}/lib"/>

    <!-- JavaGroups -->
    <property name="javagroups.javagroups.root" value="${project.thirdparty}/javagroups/javagroups"/>
    <property name="javagroups.javagroups.lib" value="${javagroups.javagroups.root}/lib"/>

    <!-- GNU Regexp -->
    <property name="gnu.regexp.root" value="${project.thirdparty}/gnu/regexp"/>
    <property name="gnu.regexp.lib" value="${gnu.regexp.root}/lib"/>

    <!-- GNU Getopt -->
    <property name="gnu.getopt.root" value="${project.thirdparty}/gnu/getopt"/>
    <property name="gnu.getopt.lib" value="${gnu.getopt.root}/lib"/>

    <!-- Java Secure Socket Extension (JSSE) -->
    <property name="sun.jsse.root" value="${project.thirdparty}/sun/jsse"/>
    <property name="sun.jsse.lib" value="${sun.jsse.root}/lib"/>

    <!-- Hypersonic SQL -->
    <property name="hsqldb.hsqldb.root" value="${project.thirdparty}/hsqldb/hsqldb"/>
    <property name="hsqldb.hsqldb.lib" value="${hsqldb.hsqldb.root}/lib"/>

    <!-- Castor -->
    <property name="exolab.castor.root" value="${project.thirdparty}/exolab/castor"/>
    <property name="exolab.castor.lib" value="${exolab.castor.root}/lib"/>

    <!-- Tyrex -->
    <property name="exolab.tyrex.root" value="${project.thirdparty}/exolab/tyrex"/>
    <property name="exolab.tyrex.lib" value="${exolab.tyrex.root}/lib"/>

    <!-- Axis -->
    <property name="apache.axis.root" value="${project.thirdparty}/apache/axis"/>
    <property name="apache.axis.lib" value="${apache.axis.root}/lib"/>
    <property name="ibm.wsdl4j.root" value="${project.thirdparty}/ibm/wsdl4j"/>
    <property name="ibm.wsdl4j.lib" value="${ibm.wsdl4j.root}/lib"/>
    <property name="techtrader.tt-bytecode.root" value="${project.thirdparty}/techtrader/tt-bytecode"/>
    <property name="techtrader.tt-bytecode.lib" value="${techtrader.tt-bytecode.root}/lib"/>

    <!-- Jacorb -->
    <property name="jacorb.jacorb.root" value="${project.thirdparty}/jacorb/jacorb"/>
    <property name="jacorb.jacorb.lib" value="${jacorb.jacorb.root}/lib"/>

    <!-- The combined library classpath -->
    <path id="library.classpath">
    </path>

    <!-- ============== -->
    <!-- Modules/Groups -->
    <!-- ============== -->

    <!-- The group to use by default -->
    <property name="groups" value="default"/>

    <!-- Sets up the module configuration. -->
    <moduleconfig property="modules" selected="${groups}">

      <!-- Modules -->

      <module name="jmx"/>
      <module name="j2ee"/>
      <module name="common"/>
      <module name="system"/>
      <module name="ejb"/>
      <module name="naming"/>
      <module name="management"/>
      <module name="server"/>
      <module name="security"/>
      <module name="messaging"/>
      <module name="connector"/>
      <module name="cluster"/>
      <module name="testsuite"/>
      <module name="varia"/>
      <module name="jetty"/>
      <module name="jboss.net"/>
      <module name="catalina"/>
      <module name="iiop"/>

      <!-- Module groups -->

      <group name="core">
        <include modules="jmx, common, system"/>
      </group>

      <group name="basic">
        <include modules="j2ee,
                          naming,
                          management,
                          server"/>
      </group>

      <group name="standard">
        <include modules="security,
                          messaging,
                          connector,
                          cluster,
                          jetty,
                          varia,
                          jboss.net,
                          iiop,
                          catalina"/>
      </group>

      <group name="optional">
      </group>

      <!-- Module group sets -->

      <group name="default">
        <include groups="core, basic, standard"/>
      </group>

      <group name="most">
        <include groups="core, basic, standard"/>
      </group>

      <group name="all">
        <include groups="core, basic, standard, optional"/>
      </group>

    </moduleconfig>

    <!-- Show the module configuration -->
    <echo>groups:  ${groups}</echo>
    <echo>modules: ${modules}</echo>

    <!-- The combined dependent module classpath -->
    <path id="dependentmodule.classpath">
    </path>

    <!-- ===== -->
    <!-- Tasks -->
    <!-- ===== -->

    <!-- Skip any missing modules and issue a warning -->
    <property name="executemodules.skipmissing" value="true"/>

    <!-- The header and footer displayed during each module execution -->
    <property name="executemodules.header"><![CDATA[
    ====================================================================== 
    ==  Executing '${target}' in module '${module}'...
    ==]]></property>

    <property name="executemodules.footer"><![CDATA[
    ==
    ==  Finished with '${target}' in module '${module}'.
    ======================================================================
    ]]></property>

    <!-- Install/Release structure -->
    <property name="install.id" value="${module.name}-${module.version}"/>
    <property name="release.id" value="${install.id}"/>

    <property name="install.root" value="${module.output}/${install.id}"/>

    <property name="install.docs" value="${install.root}/docs"/>
    <property name="install.api" value="${install.docs}/api"/>
    <property name="install.jmx-api" value="${install.docs}/jmx-api"/>
    <property name="install.todo" value="${install.docs}/todo"/>
    <property name="install.examples" value="${install.docs}/examples"/>
    <property name="install.examples.jca" value="${install.docs}/examples/jca"/>
    <property name="install.examples.jbossweb" value="${install.examples}/jbossweb"/>
    <property name="install.dtd" value="${install.docs}/dtd"/>

    <property name="install.dtd" value="${install.docs}/dtd"/>
    <property name="install.bin" value="${install.root}/bin"/>
    <property name="install.etc" value="${install.root}/etc"/>
    <property name="install.client" value="${install.root}/client"/>
    <property name="install.lib" value="${install.root}/lib"/>

    <property name="install.server" value="${install.root}/server"/>

    <!-- Configuration for the nightly build and test job -->
    <property name="run.nightly.sleep" value="1"/> <!-- 1 minute -->
    <property name="run.nightly.email.tolist" value="jboss-development@lists.sourceforge.net"/>
    <property name="run.nightly.email.from" value="noreply@jboss.org"/>
    <property name="run.nightly.email.mailhost" value="localhost"/>
    <property name="run.home.dir" value="${module.output}/${release.id}" />
    <property name="run.bin.dir" value="${run.home.dir}/bin" />

    <!-- Bits for building source archives -->
    <patternset id="source.ignore">
      <exclude name="**/output/**"/>
    </patternset>
    <patternset id="source.free">
      <exclude name="tools/**"/>
      <exclude name="thirdparty/**"/>
      <include name="**"/>
    </patternset>
    <patternset id="source.external">
      <include name="tools/**"/>
      <include name="thirdparty/**"/>
    </patternset>

  </target>


  <!-- ================================================================== -->
  <!-- Module Pass-through Targets                                        -->
  <!-- ================================================================== -->

  <!--
     | These targets will execute all configured modules with the specified
     | target.
   -->

  <target name="modules-all" depends="_buildmagic:modules:all"/>
  <target name="modules-most" depends="_buildmagic:modules:most"/>
  <target name="modules-main" depends="_buildmagic:modules:main"/>
  <target name="modules-release" depends="_buildmagic:modules:release"/>
  <target name="modules-tests" depends="_buildmagic:modules:tests"/>
  <target name="modules-clean" depends="_buildmagic:modules:clean"/>
  <target name="modules-clobber" depends="_buildmagic:modules:clobber"/>


  <!-- ================================================================== -->
  <!-- Module Pass-through Hooks                                          -->
  <!-- ================================================================== -->

  <!--
     | These hooks are executed after the above pass-through targets have 
     | finished with a given module.
   -->

  <!-- ==== -->
  <!-- J2EE -->
  <!-- ==== -->

  <target name="_module-j2ee-most">
    <property name="_module.name" value="j2ee" override="true"/>
    <property name="_module.output" override="true"
	      value="${project.root}/${_module.name}/output"/>

    <!-- Copy the generated libraries -->
    <mkdir dir="${install.lib}"/>
    <copy todir="${install.lib}" filtering="no">
      <fileset dir="${_module.output}/lib">
         <include name="jboss-j2ee.jar"/>
      </fileset>
    </copy>

    <!-- Copy the generated client libraries -->
    <mkdir dir="${install.client}"/>
    <copy todir="${install.client}" filtering="no">
      <fileset dir="${_module.output}/lib">
         <include name="jboss-j2ee.jar"/>
      </fileset>
    </copy>
  </target>

  <target name="_module-j2ee-all" depends="_module-j2ee-most">
    <!-- Copy the generated javadocs -->
    <mkdir dir="${install.api}/${_module.name}"/>
    <copy todir="${install.api}/${_module.name}" filtering="no">
      <fileset dir="${_module.output}/api">
         <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <!-- ====== -->
  <!-- Common -->
  <!-- ====== -->

  <target name="_module-common-most">
    <property name="_module.name" value="common" override="true"/>
    <property name="_module.output" override="true"
	      value="${project.root}/${_module.name}/output"/>

    <!-- Copy the generated libraries -->
    <mkdir dir="${install.lib}"/>
    <copy todir="${install.lib}" filtering="no">
      <fileset dir="${_module.output}/lib">
         <include name="jboss-common.jar"/>
      </fileset>
    </copy>

    <!-- Copy the generated client libraries -->
    <mkdir dir="${install.client}"/>
    <copy todir="${install.client}" filtering="no">
      <fileset dir="${_module.output}/lib">
         <include name="jboss-common-client.jar"/>
      </fileset>
    </copy>

    <!-- Copy thirdparty code -->
    <copy todir="${install.lib}" filtering="no">
      <fileset dir="${sun.jaxp.lib}">
        <include name="jaxp.jar"/>
        <include name="crimson.jar"/>
        <include name="xalan.jar"/>
      </fileset>

      <!-- FIXME This should go away when we have our own html adaptor -->
      <fileset dir="${sun.jmx.lib}">
        <include name="jmxri.jar"/>
        <include name="jmxtools.jar"/>
      </fileset>
    </copy>
  </target>

  <target name="_module-common-all" depends="_module-common-most">
    <!-- Copy the generated javadocs -->
    <mkdir dir="${install.api}/${_module.name}"/>
    <copy todir="${install.api}/${_module.name}" filtering="no">
      <fileset dir="${_module.output}/api">
         <include name="**/*"/>
      </fileset>
    </copy>

    <!-- Copy the generated todo docs -->
    <mkdir dir="${install.todo}/${_module.name}"/>
    <copy todir="${install.todo}/${_module.name}" filtering="no">
      <fileset dir="${_module.output}/todo">
         <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <!-- ====== -->
  <!-- System -->
  <!-- ====== -->

  <target name="_module-system-most">
    <property name="_module.name" value="system" override="true"/>
    <property name="_module.output" override="true"
	      value="${project.root}/${_module.name}/output"/>

    <!-- Copy the generated libraries -->
    <mkdir dir="${install.lib}"/>
    <copy todir="${install.lib}" filtering="no">
      <fileset dir="${_module.output}/lib">
        <include name="log4j-boot.jar"/>
        <include name="jboss-boot.jar"/>
        <include name="jboss-system.jar"/>
      </fileset>
    </copy>

    <!-- Copy the generated client -->
    <mkdir dir="${install.client}"/>
    <copy todir="${install.client}" filtering="no">
      <fileset dir="${_module.output}/lib">
        <include name="*-client.jar"/>
      </fileset>
    </copy>

    <!-- Copy the generated scripts & runnable jars -->
    <mkdir dir="${install.bin}"/>
    <copy todir="${install.bin}" filtering="no">
      <fileset dir="${_module.output}/bin">
         <include name="**/*"/>
      </fileset>
      <fileset dir="${_module.output}/lib">
         <include name="run.jar"/>
         <include name="shutdown.jar"/>
      </fileset>
    </copy>
    <chmod perm="+x">
      <fileset dir="${install.bin}">
         <include name="**/*.sh"/>
      </fileset>
    </chmod>

    <!-- Copy thirdparty code -->
    <copy todir="${install.lib}" filtering="no">
      <fileset dir="${apache.log4j.lib}">
        <include name="log4j.jar"/>
      </fileset>
      <fileset dir="${gnu.getopt.lib}">
        <include name="getopt.jar"/>
      </fileset>
    </copy>

    <!-- Copy thirdparty client code -->
    <copy todir="${install.client}" filtering="no">
      <fileset dir="${apache.log4j.lib}">
        <include name="log4j.jar"/>
      </fileset>
    </copy>
  </target>

  <target name="_module-system-all" depends="_module-system-most">
    <!-- Copy the generated javadocs -->
    <mkdir dir="${install.api}/${_module.name}"/>
    <copy todir="${install.api}/${_module.name}" filtering="no">
      <fileset dir="${_module.output}/api">
         <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <!-- ====== -->
  <!-- Naming -->
  <!-- ====== -->

  <target name="_module-naming-most">
    <property name="_module.name" value="naming" override="true"/>
    <property name="_module.output" override="true"
	      value="${project.root}/${_module.name}/output"/>

    <!-- Copy the generated libraries -->
    <mkdir dir="${install.lib}"/>
    <copy todir="${install.lib}" filtering="no">
      <fileset dir="${_module.output}/lib">
         <include name="jnpserver.jar"/>
      </fileset>
    </copy>

    <!-- Copy the generated client libraries -->
    <mkdir dir="${install.client}"/>
    <copy todir="${install.client}" filtering="no">
      <fileset dir="${_module.output}/lib">
         <include name="jnp-client.jar"/>
      </fileset>
    </copy>

  </target>

  <target name="_module-naming-all" depends="_module-naming-most">
    <!-- Copy the generated javadocs -->
    <mkdir dir="${install.api}/${_module.name}"/>
    <copy todir="${install.api}/${_module.name}" filtering="no">
      <fileset dir="${_module.output}/api">
         <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <!-- ====== -->
  <!-- Server -->
  <!-- ====== -->

  <target name="_module-server-most">
    <property name="_module.name" value="server" override="true"/>
    <property name="_module.output" override="true"
	      value="${project.root}/${_module.name}/output"/>

    <!-- Copy the generated libraries -->
    <mkdir dir="${install.lib}"/>
    <copy todir="${install.lib}" filtering="no">
      <fileset dir="${_module.output}/lib">
        <include name="jboss.jar"/>
      </fileset>
    </copy>

    <!-- Copy the generated client libraries -->
    <mkdir dir="${install.client}"/>
    <copy todir="${install.client}" filtering="no">
      <fileset dir="${_module.output}/lib">
         <include name="*-client.jar"/>
         <include name="jmx-ejb-connector-client.jar"/>
         <include name="jmx-rmi-connector-client.jar"/>
         <include name="jmx-connector-client-factory.jar"/>
      </fileset>
    </copy>

    <!-- Copy the generated scripts & runnable jars -->
    <mkdir dir="${install.bin}"/>
    <copy todir="${install.bin}" filtering="no">
      <fileset dir="${_module.output}/bin">
         <include name="**/*"/>
      </fileset>
    </copy>
    <chmod perm="+x">
      <fileset dir="${install.bin}">
         <include name="**/*.sh"/>
      </fileset>
    </chmod>

    <!-- Copy thirdparty code -->
    <copy todir="${install.lib}" filtering="no">
      <fileset dir="${sun.jts.lib}">
        <include name="jts.jar"/>
      </fileset>
      <fileset dir="${oswego.concurrent.lib}">
        <include name="concurrent.jar"/>
      </fileset>
      <fileset dir="${gjt.jpl-util.lib}">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${gnu.regexp.lib}">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${apache.bcel.lib}">
        <include name="bcel.jar"/>
      </fileset>
    </copy>

    <!-- Copy thirdparty client code -->
    <copy todir="${install.client}" filtering="no">
      <fileset dir="${oswego.concurrent.lib}">
        <include name="concurrent.jar"/>
      </fileset>
      <fileset dir="${gnu.regexp.lib}">
        <include name="*.jar"/>
      </fileset>
    </copy>

    <!-- Default server config -->
    <copy todir="${install.server}/all/deploy" filtering="no">
      <!-- Deployable xml snipets -->
      <fileset dir="${_module.output}/etc/deploy">
         <include name="**"/>
      </fileset>

      <!-- Deployable archives -->
      <fileset dir="${_module.output}/lib">
         <include name="jmx-ejb-connector-server.sar"/>
         <include name="jmx-ejb-adaptor.jar"/>
         <include name="jmx-rmi-adaptor.sar"/>
      </fileset>
    </copy>

    <!-- Copy the default configuration files -->
    <mkdir dir="${install.server}/all/conf"/>
    <copy todir="${install.server}/all/conf" filtering="no">
      <fileset dir="${_module.output}/etc/conf/default">
         <include name="*"/>
      </fileset>
    </copy>

    <!-- Copy the DTDs -->
    <mkdir dir="${install.dtd}"/>
    <copy todir="${install.dtd}" filtering="no">
      <fileset 
         dir="${project.root}/${_module.name}/src/resources/org/jboss/metadata">
         <include name="*.dtd"/>
      </fileset>
    </copy>
  </target>

  <target name="_module-server-all" depends="_module-server-most">
    <!-- Copy the static documents (docs) -->
    <mkdir dir="${install.docs}"/>
    <copy todir="${install.docs}" filtering="no">
      <fileset dir="${_module.output}/docs">
         <include name="**/*"/>
      </fileset>
    </copy>

    <!-- Copy the generated javadocs -->
    <mkdir dir="${install.api}/${_module.name}"/>
    <copy todir="${install.api}/${_module.name}" filtering="no">
      <fileset dir="${_module.output}/api">
         <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <!-- === -->
  <!-- EJB -->
  <!-- === -->

  <target name="_module-ejb-most">
    <property name="_module.name" value="ejb" override="true"/>
    <property name="_module.output" override="true"
	      value="${project.root}/${_module.name}/output"/>

    <!-- Copy the generated libraries -->
    <mkdir dir="${install.lib}"/>
    <copy todir="${install.lib}" filtering="no">
      <fileset dir="${_module.output}/lib">
         <include name="jboss-ejb.jar"/>
      </fileset>
    </copy>

    <!-- Copy the generated client libraries -->
    <mkdir dir="${install.client}"/>
    <copy todir="${install.client}" filtering="no">
      <fileset dir="${_module.output}/lib">
         <include name="jboss-ejb-client.jar"/>
      </fileset>
    </copy>
  </target>

  <target name="_module-ejb-all" depends="_module-ejb-most">
    <!-- Copy the generated javadocs -->
    <mkdir dir="${install.api}/${_module.name}"/>
    <copy todir="${install.api}/${_module.name}" filtering="no">
      <fileset dir="${_module.output}/api">
         <include name="**/*"/>
      </fileset>
    </copy>
  </target>


  <!-- ========= -->
  <!-- Connector -->
  <!-- ========= -->

  <target name="_module-connector-most">
    <property name="_module.name" value="connector" override="true"/>
    <property name="_module.output" override="true"
	      value="${project.root}/${_module.name}/output"/>

    <!-- Copy the generated libraries -->
    <mkdir dir="${install.lib}"/>
    <copy todir="${install.lib}" filtering="no">
      <fileset dir="${_module.output}/lib">
         <include name="jboss-jca.jar"/>
      </fileset>
    </copy>

    <!-- Copy the generated deployment libraries -->
    <mkdir dir="${install.server}/all/deploy"/>
    <copy todir="${install.server}/all/deploy" filtering="no">
      <fileset dir="${_module.output}/lib">
         <include name="*.rar"/>
      </fileset>
    </copy>

    <!-- HACK, HACK, HACK -->
    <copy file="${_module.output}/resources/jca-sar/META-INF/jboss-service.xml"
          tofile="${install.server}/all/deploy/jca-service.xml" filtering="no"/>

    <!-- Copy example db configs -->
    <mkdir dir="${install.examples.jca}"/>
    <copy todir="${install.examples.jca}" filtering="no">
      <fileset dir="${_module.output}/etc/example-config">
         <include name="*.xml"/>
      </fileset>
    </copy>
    <copy todir="${install.server}/all/deploy" filtering="no">
      <fileset dir="${_module.output}/etc/example-config">
         <!--include name="firebird-service.xml"/-->
         <include name="hsqldb-service.xml"/>
         <!--include name="mysql-service.xml"/-->
         <!--include name="oracle-service.xml"/-->
         <!--include name="postgres-service.xml"/-->
      </fileset>
    </copy>
  </target>

  <target name="_module-connector-all" depends="_module-connector-most">
    <!-- Copy the generated javadocs -->
    <mkdir dir="${install.api}/${_module.name}"/>
    <copy todir="${install.api}/${_module.name}" filtering="no">
      <fileset dir="${_module.output}/api">
         <include name="**/*"/>
      </fileset>
    </copy>

    <!--Copy generated jmx documentation -->
    <mkdir dir="${install.jmx-api}"/>
    <copy todir="${install.jmx-api}" filtering="no">
      <fileset dir="${_module.output}/jmx-api">
         <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <!-- ========= -->
  <!-- Messaging -->
  <!-- ========= -->

  <target name="_module-messaging-most">
    <property name="_module.name" value="messaging" override="true"/>
    <property name="_module.output" override="true"
	      value="${project.root}/${_module.name}/output"/>

    <!-- Copy the generated libraries -->
    <mkdir dir="${install.lib}"/>
    <copy todir="${install.lib}" filtering="no">
      <fileset dir="${_module.output}/lib">
         <include name="jbossmq.jar"/>
      </fileset>
    </copy>

    <!-- Copy the generated client libraries -->
    <mkdir dir="${install.client}"/>
    <copy todir="${install.client}" filtering="no">
      <fileset dir="${_module.output}/lib">
         <include name="*-client.jar"/>
      </fileset>
    </copy>

    <!-- Default server config -->

    <!-- Copy the default jbossmq deployment configuration -->
    <mkdir dir="${install.server}/all/deploy"/>
    <copy todir="${install.server}/all" filtering="no">
      <fileset dir="${_module.output}/etc/server/default">
        <include name="**"/>
      </fileset>
    </copy>
  </target>

  <target name="_module-messaging-all" depends="_module-messaging-most">
    <!-- Copy the static documents (docs) -->
    <mkdir dir="${install.docs}"/>
    <copy todir="${install.docs}" filtering="no">
      <fileset dir="${_module.output}/docs">
         <include name="**/*"/>
      </fileset>
    </copy>

    <!-- Copy the generated javadocs -->
    <mkdir dir="${install.api}/${_module.name}"/>
    <copy todir="${install.api}/${_module.name}" filtering="no">
      <fileset dir="${_module.output}/api">
         <include name="**/*"/>
      </fileset>
    </copy>
  </target>


  <!-- === -->
  <!-- JMX -->
  <!-- === -->

  <target name="_module-jmx-most">
    <property name="_module.name" value="jmx" override="true"/>
    <property name="_module.output" override="true"
	      value="${project.root}/${_module.name}/output"/>

    <!-- Copy the generated libraries -->
    <mkdir dir="${install.lib}"/>
    <copy todir="${install.lib}" filtering="no">
      <fileset dir="${_module.output}/lib">
         <include name="jboss-jmx.jar"/>
      </fileset>
    </copy>

    <!-- Copy the DTDs -->
    <mkdir dir="${install.dtd}"/>
    <copy todir="${install.dtd}" filtering="no">
      <fileset 
         dir="${project.root}/${_module.name}/src/resources/metadata">
         <include name="*.dtd"/>
      </fileset>
    </copy>
  </target>

  <target name="_module-jmx-all" depends="_module-jmx-most">
    <!-- Copy the generated javadocs -->
    <mkdir dir="${install.api}/${_module.name}"/>
    <copy todir="${install.api}/${_module.name}" filtering="no">
      <fileset dir="${_module.output}/api">
         <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <!-- ======== -->
  <!-- Security -->
  <!-- ======== -->

  <target name="_module-security-most">
    <property name="_module.name" value="security" override="true"/>
    <property name="_module.output" override="true"
	      value="${project.root}/${_module.name}/output"/>

    <!-- Copy the generated libraries -->
    <mkdir dir="${install.lib}"/>
    <copy todir="${install.lib}" filtering="no">
      <fileset dir="${_module.output}/lib">
         <include name="jbosssx.jar"/>
         <include name="jaas.jar"/>
      </fileset>
    </copy>

    <!-- Copy the generated client libraries -->
    <mkdir dir="${install.client}"/>
    <copy todir="${install.client}" filtering="no">
      <fileset dir="${_module.output}/lib">
         <include name="*-client.jar"/>
         <include name="jaas.jar"/>
      </fileset>
      <fileset dir="${_module.output}/etc/client">
         <include name="*"/>
      </fileset>
    </copy>

    <!-- Copy thirdparty code -->
    <copy todir="${install.lib}" filtering="no">
      <fileset dir="${sun.jsse.lib}">
        <include name="*.jar"/>
      </fileset>
    </copy>

    <!-- Copy thirdparty client code -->
    <copy todir="${install.client}" filtering="no">
      <fileset dir="${sun.jsse.lib}">
        <include name="*.jar"/>
      </fileset>
    </copy>
  </target>

  <target name="_module-security-all" depends="_module-security-most">
    <!-- Copy the generated javadocs -->
    <mkdir dir="${install.api}/${_module.name}"/>
    <copy todir="${install.api}/${_module.name}" filtering="no">
      <fileset dir="${_module.output}/api">
         <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <!-- ======= -->
  <!-- Cluster -->
  <!-- ======= -->

  <target name="_module-cluster-most">
    <property name="_module.name" value="cluster" override="true"/>
    <property name="_module.output" override="true"
	      value="${project.root}/${_module.name}/output"/>

    <!-- Copy the generated libraries -->
    <mkdir dir="${install.lib}"/>
    <copy todir="${install.lib}" filtering="no">
      <fileset dir="${_module.output}/lib">
         <include name="jbossmx.jar"/>
         <include name="jbossha.jar"/>
         <include name="jbossmqha.jar"/>
      </fileset>
    </copy>

    <!-- Copy the generated client libraries -->
    <mkdir dir="${install.client}"/>
    <copy todir="${install.client}" filtering="no">
      <fileset dir="${_module.output}/lib">
         <include name="jbossha-client.jar"/>
         <include name="jbossmqha.jar"/>
      </fileset>
    </copy>

    <!-- Copy thirdparty code -->
    <copy todir="${install.lib}" filtering="no">
      <fileset dir="${javagroups.javagroups.lib}">
        <include name="javagroups-2.0.jar"/>
      </fileset>
    </copy>

    <!-- Default server config -->

    <!-- Copy the deployables -->
    <mkdir dir="${install.server}/all/deploy"/>
    <copy todir="${install.server}/all/deploy" filtering="no">
      <fileset dir="${_module.output}/etc">
         <include name="cluster-service.xml"/>
      </fileset>
      <fileset dir="${_module.output}/lib">
         <include name="jbossha-httpsession.sar"/>
      </fileset>
    </copy>

  </target>

  <target name="_module-cluster-all" depends="_module-cluster-most">
    <!-- Copy the examples -->
    <mkdir dir="${install.docs}/${module}"/>
    <copy todir="${install.docs}/${module}" filtering="no">
      <fileset dir="${_module.output}">
         <include name="examples/*"/>
      </fileset>
    </copy>

    <!-- Copy the generated javadocs -->
    <mkdir dir="${install.api}/${_module.name}"/>
    <copy todir="${install.api}/${_module.name}" filtering="no">
      <fileset dir="${_module.output}/api">
         <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <!-- ===== -->
  <!-- Varia -->
  <!-- ===== -->

  <target name="_module-varia-most">
    <property name="_module.name" value="varia" override="true"/>
    <property name="_module.output" override="true"
	      value="${project.root}/${_module.name}/output"/>

    <!-- Copy the generated libraries -->
    <mkdir dir="${install.lib}"/>
    <copy todir="${install.lib}" filtering="no">
      <fileset dir="${_module.output}/lib">
         <include name="mail-plugin.jar"/>
         <include name="counter-plugin.jar"/>
         <include name="scheduler-plugin.jar"/>
         <include name="scheduler-plugin-example.jar"/>
         <include name="hsqldb-plugin.jar"/>
         <include name="autonumber-plugin.jar"/>
         <include name="properties-plugin.jar"/>
         <include name="process-plugin.jar"/>
      </fileset>
    </copy>

    <!-- Copy thirdparty code -->
    <copy todir="${install.lib}" filtering="no">
      <fileset dir="${sun.jaf.lib}">
        <include name="activation.jar"/>
      </fileset>
      <fileset dir="${sun.javamail.lib}">
        <include name="mail.jar"/>
      </fileset>
      <fileset dir="${sun.jts.lib}">
        <include name="jts.jar"/>
      </fileset>
      <fileset dir="${hsqldb.hsqldb.lib}">
        <include name="hsqldb.jar"/>
      </fileset>
      <fileset dir="${exolab.castor.lib}">
        <include name="castor.jar"/>
      </fileset>
      <fileset dir="${exolab.tyrex.lib}">
        <include name="tyrex.jar"/>
      </fileset>
    </copy>

    <!-- Default server config -->

    <!-- Copy the deployables -->
    <mkdir dir="${install.server}/all/deploy"/>
    <copy todir="${install.server}/all/deploy" filtering="no">
      <!-- Deployable configuration -->
      <fileset dir="${_module.output}/etc">
         <include name="mail-service.xml"/>

         <!-- These should move to example/deploy -->
         <include name="scheduler-service.xml"/>
         <include name="counter-service.xml"/>
         <include name="properties-service.xml"/>
      </fileset>
    </copy>

    <!-- Unpack the JMX console war -->
    <mkdir dir="${install.server}/all/deploy/jmx-console.war"/>
    <unjar src="${_module.output}/lib/htmladaptor.war"
       dest="${install.server}/all/deploy/jmx-console.war" />

    <!-- Include the HTTP invoker service unpacked -->
    <mkdir dir="${install.server}/all/deploy/http-invoker.sar"/>
    <unjar src="${_module.output}/lib/http-invoker.sar"
       dest="${install.server}/all/deploy/http-invoker.sar" />
    <move file="${install.server}/all/deploy/http-invoker.sar/http-invoker.war"
       tofile="${install.server}/all/deploy/http-invoker.sar/tmp.war" />
    <unjar src="${install.server}/all/deploy/http-invoker.sar/tmp.war"
       dest="${install.server}/all/deploy/http-invoker.sar/invoker.war" />
    <delete file="${install.server}/all/deploy/http-invoker.sar/tmp.war" />

    <!-- copy the ant jmx client -->
    <mkdir dir="${install.client}"/>
    <copy todir="${install.client}" filtering="no">
      <fileset dir="${_module.output}/lib">
         <include name="jbossjmx-ant.jar"/>
      </fileset>
    </copy>

  </target>

  <target name="_module-varia-all" depends="_module-varia-most">
    <!-- Copy the generated javadocs -->
    <mkdir dir="${install.api}/${_module.name}"/>
    <copy todir="${install.api}/${_module.name}" filtering="no">
      <fileset dir="${_module.output}/api">
         <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <!-- ===== -->
  <!-- Jetty -->
  <!-- ===== -->

  <target name="_module-jetty-most">
    <property name="_module.name" value="jetty" override="true"/>
    <property name="_module.output" override="true"
	      value="${project.root}/${_module.name}/output"/>

    <!-- Copy the generated libraries -->
    <mkdir dir="${install.lib}"/>
    <copy todir="${install.lib}" filtering="no">
      <fileset dir="${_module.output}/lib">
        <include name="javax.servlet.jar"/>
      </fileset>
    </copy>

    <!-- Copy thirdparty code -->
    <copy todir="${install.lib}" filtering="no">
      <fileset dir="${project.tools}/lib">
        <include name="ant.jar"/>
      </fileset>
    </copy>

    <!-- Default server config -->

    <!-- Copy the deployables -->
    <mkdir dir="${install.server}/all/deploy"/>
    <mkdir dir="${install.server}/all/deploy/jbossweb.sar"/>
    <unjar src="${_module.output}/lib/jetty-plugin.sar"
           dest="${install.server}/all/deploy/jbossweb.sar"/>

    <copy file="${_module.output}/lib/org.mortbay.j2ee.session.ejb.jar"
          tofile="${install.server}/all/deploy/jbossweb-ejb.jar"
          filtering="no"
    />
  </target>

  <target name="_module-jetty-all" depends="_module-jetty-most">

    <!-- Copy examples to docs -->
    <mkdir dir="${install.examples.jbossweb}"/>
    <copy file="${project.root}/${_module.name}/docs/jetty-web.xml"
          todir="${install.examples.jbossweb}/"
          filtering="no"
    />
    <copy file="${project.root}/${_module.name}/FAQ"
          todir="${install.examples.jbossweb}/"
          filtering="no"
    />

    <!-- Copy the generated javadocs -->
    <mkdir dir="${install.api}/${_module.name}"/>
    <copy todir="${install.api}/${_module.name}" filtering="no">
      <fileset dir="${_module.output}/api">
         <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <!-- ========= -->
  <!-- JBoss.net -->
  <!-- ========= -->

  <target name="_module-jboss.net-most">
    <property name="_module.name" value="jboss.net" override="true"/>
    <property name="_module.output" override="true"
	      value="${project.root}/${_module.name}/output"/>

    <!-- Copy the generated libraries -->
    <mkdir dir="${install.lib}"/>
    <copy todir="${install.lib}" filtering="no">
      <fileset dir="${apache.axis.lib}">
        <include name="axis.jar"/>
      </fileset>
      <fileset dir="${ibm.wsdl4j.lib}">
        <include name="wsdl4j.jar"/>
      </fileset>
      <fileset dir="${apache.log4j.lib}">
        <include name="commons-logging.jar"/>
      </fileset>
      <fileset dir="${techtrader.tt-bytecode.lib}">
        <include name="tt-bytecode.jar"/>
      </fileset>
    </copy>

    <!-- Copy the client configuration files -->
    <mkdir dir="${install.client}"/>
    <copy todir="${install.client}" filtering="no">
      <fileset dir="${_module.output}/etc">
         <include name="client-config.xml"/>
      </fileset>
      <fileset dir="${_module.output}/lib">
	 <include name="jboss-net-client.jar"/>
      </fileset>
    </copy>


    <!-- Default server config -->

    <!-- Deployables -->
    <mkdir dir="${install.server}/all/deploy"/>
    <copy todir="${install.server}/all/deploy" filtering="no">
      <fileset dir="${_module.output}/lib">
         <include name="jboss-net.sar"/>
      </fileset>
    </copy>

    <!-- Copy the default configuration files -->
    <mkdir dir="${install.server}/all/conf"/>
    <copy todir="${install.server}/all/conf" filtering="no">
      <fileset dir="${_module.output}/etc">
         <include name="axis-config.xml"/>
      </fileset>
    </copy>

  </target>

  <target name="_module-jboss.net-all" depends="_module-jboss.net-most">
    <!-- Copy the generated javadocs -->
    <mkdir dir="${install.api}/${_module.name}"/>
    <copy todir="${install.api}/${_module.name}" filtering="no">
      <fileset dir="${_module.output}/api">
         <include name="**/*"/>
      </fileset>
    </copy>
  </target>


  <!-- ==== -->
  <!-- IIOP -->
  <!-- ==== -->

  <target name="_module-iiop-most">
    <property name="_module.name" value="iiop" override="true"/>
    <property name="_module.output" override="true"
	      value="${project.root}/${_module.name}/output"/>

    <!-- Copy the jboss-iiop.jar -->
    <copy todir="${install.lib}" filtering="no">
      <fileset dir="${_module.output}/lib">
         <include name="jboss-iiop.jar"/>
      </fileset>
    </copy>

    <!-- Copy the jboss-iiop-client.jar -->
    <copy todir="${install.client}" filtering="no">
      <fileset dir="${_module.output}/lib">
         <include name="jboss-iiop-client.jar"/>
      </fileset>
    </copy>

    <!-- Copy thirdparty code -->
    <copy todir="${install.lib}" filtering="no">
      <fileset dir="${jacorb.jacorb.lib}">
        <include name="jacorb.jar"/>
      </fileset>
    </copy>

    <!-- Copy thirdparty client code -->
    <copy todir="${install.client}" filtering="no">
      <fileset dir="${jacorb.jacorb.lib}">
        <include name="jacorb.jar"/>
      </fileset>
    </copy>

    <!-- Copy thirdparty configuration file -->
    <mkdir dir="${install.server}/all/conf"/>
    <copy todir="${install.server}/all/conf" filtering="no">
      <fileset dir="${jacorb.jacorb.root}/conf/default">
        <include name="jacorb.properties"/>
      </fileset>
    </copy>

    <!-- Copy deployable service file -->
    <mkdir dir="${install.server}/all/deploy"/>
    <copy todir="${install.server}/all/deploy" filtering="no">
      <fileset dir="${_module.output}/etc">
         <include name="iiop-service.xml"/>
      </fileset>
    </copy>

  </target>

  <target name="_module-iiop-all" depends="_module-iiop-most">
    <!-- Copy the generated javadocs -->
    <mkdir dir="${install.api}/${_module.name}"/>
    <copy todir="${install.api}/${_module.name}" filtering="no">
      <fileset dir="${_module.output}/api">
         <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <!-- ========== -->
  <!-- Management -->
  <!-- ========== -->

  <target name="_module-management-most">
    <property name="_module.name" value="management" override="true"/>
    <property name="_module.output" override="true"
	      value="${project.root}/${_module.name}/output"/>

    <!-- Copy the generated libraries -->
    <mkdir dir="${install.lib}"/>
    <copy todir="${install.lib}" filtering="no">
      <fileset dir="${_module.output}/lib">
         <include name="jboss-jsr77.jar"/>
         <include name="jboss-management.jar"/>
      </fileset>
    </copy>

    <mkdir dir="${install.server}/all/deploy"/>
    <copy todir="${install.server}/all/deploy" filtering="no">
      <!-- Deployable archives -->
      <fileset dir="${_module.output}/lib">
         <include name="ejb-management.jar"/>
      </fileset>
    </copy>

    <!-- Copy the generated client libraries -->
    <mkdir dir="${install.client}"/>
    <copy todir="${install.client}" filtering="no">
      <fileset dir="${_module.output}/lib">
         <include name="jboss-jsr77.jar"/>
      </fileset>
    </copy>
  </target>

  <target name="_module-management-all" depends="_module-management-most">
    <!-- Copy the generated javadocs -->
    <mkdir dir="${install.api}/${_module.name}"/>
    <copy todir="${install.api}/${_module.name}" filtering="no">
      <fileset dir="${_module.output}/api">
         <include name="**/*"/>
      </fileset>
    </copy>

    <!-- Copy the generated todo docs -->
    <mkdir dir="${install.todo}/${_module.name}"/>
    <copy todir="${install.todo}/${_module.name}" filtering="no">
      <fileset dir="${_module.output}/todo">
         <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <!-- This just writes a module.version file into the catalina directory
   so that the JBoss/Tomcat bundle may be built from there without having
   to copy the version info from the main build.xml file.
  -->
  <target name="_module-catalina-most" depends="_module-server-most">
    <property name="_module.name" value="catalina" override="true"/>
    <property name="_module.output" override="true"
	      value="${project.root}/${_module.name}/output"/>

   <echo message="module.version=${module.version}"
      file="${project.root}/${_module.name}/module.version" />
  </target>

  <!-- ================================================================== -->
  <!-- Install & Release                                                  -->
  <!-- ================================================================== -->

  <target name="install" 
	  description="Install the structure for a release."
     depends="partition-build"
     />

  <target name="release" 
	  description="Builds the default release structure."
	  depends="modules-most, install"/>

  <target name="release-full" 
	  description="Builds the full release structure."
	  depends="modules-all, install"/>

  <target name="release-zip" 
	  description="Builds a ZIP distribution."
	  depends="release, _buildmagic:release:zip"/>

  <target name="release-tar" 
	  description="Builds a TAR distribution."
	  depends="release, _buildmagic:release:tar"/>

  <target name="release-tgz" 
	  description="Builds a TAR-GZ distribution."
	  depends="release, _buildmagic:release:tgz"/>

  <target name="release-all"
	  description="Builds a distribution for each archive type."
	  depends="release-zip, release-tgz"/>

  <!-- Partition the default single configuration build into a minimal
  default and all build with a minimal set of jars in the root lib dir.
  -->
  <target name="partition-build" depends="init">
    <!-- Move all but the minimum jars from lib to server/all/lib -->
    <mkdir dir="${install.server}/all/lib" />
    <move todir="${install.server}/all/lib" filtering="no">
      <fileset dir="${install.lib}">
        <include name="ant.jar"/>
        <include name="activation.jar"/>
        <include name="autonumber-plugin.jar"/>
        <include name="axis.jar"/>
        <include name="bcel.jar"/>
        <include name="castor.jar"/>
        <include name="commons-logging.jar"/>
        <include name="counter-plugin.jar"/>
        <include name="hsqldb-plugin.jar"/>
        <include name="hsqldb.jar"/>
        <include name="jaas.jar"/>
        <include name="jacorb.jar"/>
        <include name="javagroups-2.0.jar"/>
        <include name="javax.servlet.jar"/>
        <include name="jcert.jar"/>
        <include name="jmxri.jar"/>
        <include name="jmxtools.jar"/>
        <include name="jnet.jar"/>
        <include name="jnpserver.jar"/>
        <include name="jboss-iiop.jar"/>
        <include name="jpl-pattern.jar"/>
        <include name="jpl-util.jar"/>
        <include name="jboss-j2ee.jar"/>
        <include name="jboss-jca.jar"/>
        <include name="jsse.jar"/>
        <include name="jts.jar"/>
        <include name="jboss.jar"/>
        <include name="jboss-jsr77.jar"/>
        <include name="jboss-management.jar"/>
        <include name="log4j.jar"/>
        <include name="mail-plugin.jar"/>
        <include name="mail.jar"/>
        <include name="jbossha.jar"/>
        <include name="jbossmq.jar"/>
        <include name="jbossmqha.jar"/>
        <include name="jbossmx.jar"/>
        <include name="jbosssx.jar"/>
        <include name="org.apache.jasper.jar"/>
        <include name="properties-plugin.jar"/>
        <include name="process-plugin.jar"/>
        <include name="scheduler-plugin-example.jar"/>
        <include name="scheduler-plugin.jar"/>
        <include name="tt-bytecode.jar"/>
        <include name="tyrex.jar"/>
        <include name="wsdl4j.jar"/>
        <include name="xalan.jar"/>
      </fileset>
    </move>

    <!-- Copy server/all to server/default and then remove the services and
    jars outside of the scope of the default config -->
    <copy todir="${install.server}/default">
      <fileset dir="${install.server}/all">
        <exclude name="db/**"/>
      </fileset>
    </copy>

    <delete>
      <fileset dir="${install.server}/default/lib">
        <include name="axis.jar"/>
        <include name="commons-logging.jar"/>
        <include name="javagroups-2.0.jar"/>
        <include name="jacorb.jar"/>
        <include name="javagroups-2.0.jar"/>
        <include name="jboss-iiop.jar"/>
        <include name="jbossmqha.jar"/>
        <include name="tt-bytecode.jar"/>
        <include name="wsdl4j.jar"/>
      </fileset>
    </delete>
    <delete>
      <fileset dir="${install.server}/default/deploy">
        <include name="cluster-service.xml"/>
        <include name="iiop-service.xml"/>
        <include name="jboss-net.sar"/>
        <include name="jbossha-httpsession.sar"/>
        <include name="jbossweb-ejb.jar"/>
      </fileset>
    </delete>
    <delete>
      <fileset dir="${install.server}/default/conf">
        <include name="axis-config.xml"/>
        <include name="jacorb.properties"/>
      </fileset>
    </delete>

    <!-- Build server/minimal manually -->
    <mkdir dir="${install.server}/minimal/deploy"/>
    <copy todir="${install.server}/minimal/conf">
      <fileset dir="${install.server}/default/conf">
        <include name="jboss-minimal.xml" />
        <include name="jndi.properties" />
        <include name="log4j.xml" />
      </fileset>
    </copy>
    <move file="${install.server}/minimal/conf/jboss-minimal.xml"
      tofile="${install.server}/minimal/conf/jboss-service.xml" />
    <copy todir="${install.server}/minimal/lib">
      <fileset dir="${install.server}/default/lib">
        <include name="jboss-management.jar" />
        <include name="jnet.jar" />
        <include name="jnpserver.jar" />
        <include name="log4j.jar" />
      </fileset>
    </copy>
    <copy todir="${install.server}/minimal/deploy"
      file="${install.server}/default/deploy/user-service.xml" />
    <copy todir="${install.server}/minimal/lib"
      file="${project.root}/server/output/lib/jboss-minimal.jar" /> 

    <!--Create a jbossall-client.jar containing everything a client app needs-->
    <mkdir dir="build"/>
        
    <unjar dest="build" src="${install.client}/jboss-client.jar"/>
    <unjar dest="build" src="${install.client}/jboss-common-client.jar"/>
    <unjar dest="build" src="${install.client}/jbossha-client.jar"/>
    <unjar dest="build" src="${install.client}/jboss-iiop-client.jar"/>
    <unjar dest="build" src="${install.client}/jbossmq-client.jar"/>
    <unjar dest="build" src="${install.client}/jboss-net-client.jar"/>
    <unjar dest="build" src="${install.client}/jbosssx-client.jar"/>
    <unjar dest="build" src="${install.client}/jboss-system-client.jar"/>
    <unjar dest="build" src="${install.client}/jmx-ejb-connector-client.jar"/>
    <unjar dest="build" src="${install.client}/jmx-rmi-connector-client.jar"/>
    <unjar dest="build" src="${install.client}/jnp-client.jar"/>
    <unjar dest="build" src="${install.client}/jboss-j2ee.jar"/>
    <unjar dest="build" src="${install.client}/jmx-connector-client-factory.jar"/>
    <unjar dest="build" src="${install.client}/jbossmqha.jar"/>
    <unjar dest="build" src="${install.client}/concurrent.jar"/>
    <jar jarfile="${install.client}/jbossall-client.jar" basedir="build" />

    <delete dir="build" />

  </target>

  <!-- ================================================================== -->
  <!-- Source Archives                                                    -->
  <!-- ================================================================== -->

  <target name="source-free-zip" depends="init"
	  description="Builds a ZIP free source distribution.">
    <mkdir dir="${module.output}"/>
    <zip zipfile="${module.output}/${release.id}-free-src.zip">
      <fileset dir="${project.root}">
        <patternset refid="source.ignore"/>
        <patternset refid="source.free"/>
      </fileset>
    </zip>
  </target>

  <target name="source-external-zip" depends="init"
	  description="Builds a ZIP external source distribution.">
    <mkdir dir="${module.output}"/>
    <zip zipfile="${module.output}/${release.id}-external-src.zip">
      <fileset dir="${project.root}">
        <patternset refid="source.ignore"/>
        <patternset refid="source.external"/>
      </fileset>
    </zip>
  </target>

  <target name="source-zip" depends="source-free-zip, source-external-zip"
	  description="Builds a ZIP source distribution."/>

  <target name="source-free-tar" depends="init"
	  description="Builds a TAR free source distribution.">
    <mkdir dir="${module.output}"/>
    <tar tarfile="${module.output}/${release.id}-free-src.tar" longfile="gnu"
	 basedir="${project.root}">
        <patternset refid="source.ignore"/>
        <patternset refid="source.free"/>
    </tar>
  </target>

  <target name="source-external-tar" depends="init"
	  description="Builds a TAR external source distribution.">
    <mkdir dir="${module.output}"/>
    <tar tarfile="${module.output}/${release.id}-external-src.tar" longfile="gnu"
	 basedir="${project.root}">
        <patternset refid="source.ignore"/>
        <patternset refid="source.external"/>
    </tar>
  </target>

  <target name="source-tar" depends="source-free-tar, source-external-tar"
	  description="Builds a TAR source distribution."/>

  <target name="source-free-tgz" depends="source-free-tar"
	  description="Builds a TAR-GZIP free source distribution.">
    <gzip src="${module.output}/${release.id}-free-src.tar"
	  zipfile="${module.output}/${release.id}-free-src.tgz"/>
  </target>

  <target name="source-external-tgz" depends="source-external-tar"
	  description="Builds a TAR-GZIP external source distribution.">
    <gzip src="${module.output}/${release.id}-external-src.tar"
	  zipfile="${module.output}/${release.id}-external-src.tgz"/>
  </target>

  <target name="source-tgz" depends="source-free-tgz, source-external-tgz"
	  description="Builds a TAR-GZIP source distribution."/>

  <target name="source-all"
	  depends="source-tar, source-tgz, source-zip"
	  description="Builds all source distributions."/>


  <!-- ================================================================== -->
  <!-- Cleaning                                                           -->
  <!-- ================================================================== -->

  <!-- Clean up all build output -->
  <target name="clean" depends="_buildmagic:clean, modules-clean"
	  description="Cleans up most generated files.">
  </target>

  <!-- Clean up all generated files -->
  <target name="clobber" depends="_buildmagic:clobber, clean, modules-clobber"
	  description="Cleans up all generated files.">
    <delete file="${module.root}/run.log"/>
  </target>


  <!-- ================================================================== -->
  <!-- Misc.                                                              -->
  <!-- ================================================================== -->

  <target name="main" depends="most"
	  description="Executes the default target (most)."/>
    
  <target name="all" depends="modules-all, install"
	  description="Executes all modules and builds everything."/>

  <target name="most" depends="modules-most, install"
	  description="Executes all modules and builds most everything."/>

  <target name="help" depends="_buildmagic:help:build"
          description="Show this help message."/>


  <!-- ================================================================== -->
  <!-- ================================================================== -->
  <!-- ================================================================== -->

  <!--
     | NOTE: The following targets will probably be moved to external 
     |       scripts or external build files.
   -->

  <!-- ================================================================== -->
  <!-- Run the JBoss/Testsuite                                            -->
  <!-- ================================================================== -->

  <target name="testsuite" depends="run-testsuite"/>

  <!-- 
     | Invoke the 'tests-unit' on the 'testsuite' module. This must
     | be run prior to commiting any changes to ensure that your changes
     | don't cause grief to other developers.
   -->
  <target name="run-basic-testsuite" depends="init"
          description="Execute the testsuite.">
    <execmodules target="tests-unit" modules="testsuite"
                 root="${project.root}/${module}"
                 skipmissing="${executemodules.skipmissing}">
      <before target="${target}-${module}-prepare"/>
      <header message="${executemodules.header}"/>
      <footer message="${executemodules.footer}"/>
      <after target="${target}-${module}"/>
    </execmodules>
  </target>

  <!-- Invoke the 'tests' on the 'testsuite' module -->
  <target name="run-testsuite" depends="init"
          description="Execute the testsuite.">
    <execmodules target="tests" modules="testsuite"
		 root="${project.root}/${module}"
		 skipmissing="${executemodules.skipmissing}">
      <before target="${target}-${module}-prepare"/>
      <header message="${executemodules.header}"/>
      <footer message="${executemodules.footer}"/>
      <after target="${target}-${module}"/>
    </execmodules>
  </target>

  <!-- Invoke a single testcase on the 'testsuite' module -->
  <!-- This needs specification of the test case class    -->
  <!-- Example: "testcase -Dtest=MDBUnitTestCase"         -->
  <target name="testcase" depends="init"
          description="Run a test case.">
    <execmodules target="one-test" modules="testsuite"
		 root="${project.root}/${module}"
		 skipmissing="${executemodules.skipmissing}">
      <before target="${target}-${module}-prepare"/>
      <header message="${executemodules.header}"/>
      <footer message="${executemodules.footer}"/>
      <after target="${target}-${module}"/>
    </execmodules>
  </target>

  <!-- Run JBoss -->
  <property name="run.jboss.flags" value="-c all"/>

  <target name="run-jboss" depends="init"
          description="Runs the JBoss server.">
    <echo>Starting JBoss (redirected ${basedir}/run.log) </echo>
    <call target="run-jboss-check-os"/>
    <call target="run-jboss-unix"/>
    <call target="run-jboss-win32"/>
  </target>

  <target name="run-jboss-check-os">
    <condition property="run.jboss.unix">
      <os family="unix"/>
    </condition>
    <condition property="run.jboss.win32">
      <or>
        <os family="windows"/>
        <os family="dos"/>
      </or>
    </condition>
  </target>

  <!-- this is sloppy -->

  <target name="run-jboss-unix" depends="init" if="run.jboss.unix">
    <exec executable="${run.bin.dir}/run.sh"
	  dir="${run.home.dir}"
          output="${basedir}/run.log"
	  newenvironment="true">
      <arg line="${run.jboss.flags}"/>
    </exec>
  </target>

  <target name="run-jboss-win32" depends="init" if="run.jboss.win32">
    <echo message="${run.home.dir}"/>
    <exec executable="${run.bin.dir}/run.bat"
	  dir="${run.bin.dir}"
          output="${basedir}/run.log"
	  newenvironment="true">
      <arg line="${run.jboss.flags}"/>
    </exec>
  </target>


  <!-- ================================================================== -->
  <!-- Run the Nightly Tasks                                              -->
  <!-- ================================================================== -->

  <target name="update-project" depends="init">
    <echo>Updating project workspace...</echo>
    <cvs command="update -d" dest="${project.root}"/>
  </target>

  <target name="update-module" depends="init">
    <echo>Updating module workspace...</echo>
    <cvs command="update -d" dest="${module.root}"/>
  </target>

  <target name="run-nightly" depends="init">
    <!-- perhaps refresh cvs -->
    <call target="update-project" unless="test.skipupdate"/>

    <!-- perhaps clean/clobber -->
    <call target="clean" if="test.clean"/>
    <call target="clobber" if="test.clobber"/>

    <!-- build most everything -->
    <call target="most" unless="test.skipbuild" />

    <!-- run the server in a seperate thread-->
    <parallel>
      <sequential>
        <antcall target="run-jboss"/>
      </sequential>

      <sequential>
        <echo>Waiting for JBoss to activate (${run.nightly.sleep} minute)</echo>
        <!-- need something to wait until jboss is up, or timeout -->
        <sleep minutes="${run.nightly.sleep}"/>

        <!-- start the testsuite (it will generate reports by default) -->
        <echo>Starting JBoss/Testsuite</echo>
        <call target="run-testsuite"/>

        <!-- shutdown the server -->
        <echo>Stopping JBoss</echo>
        <java classname="org.jboss.Shutdown">
          <classpath>
            <pathelement location="${run.bin.dir}/shutdown.jar"/>
          </classpath>

          <arg value="localhost"/>
          <arg value="8080"/>
        </java>
      </sequential>
    </parallel>

    <call target="run-nightly-email"/>
  </target>

  <target name="run-nightly-email" depends="init">
    <tstamp>
     <format property="TODAYS_DATE" pattern="d-MMMM-yyyy" />
    </tstamp>
    <echo>Sending Reports</echo>
    <echo message="to: ${run.nightly.email.tolist}"/>
    <echo message="from: ${run.nightly.email.from}"/>
    <echo message="via: ${run.nightly.email.mailhost}"/>

    <!-- email output to list -->
    <mail tolist="${run.nightly.email.tolist}"
	  subject="Automated JBoss(${version.name}) Testsuite Results: ${TODAYS_DATE}"
	  message="Automated JBoss(${version.name}) Testsuite Results: ${TODAYS_DATE}\n\n"
	  from="${run.nightly.email.from}"
          mailhost="${run.nightly.email.mailhost}"
          files="${project.root}/testsuite/output/reports/text/TESTS-TestSuites.txt"/>
  </target>

</project>
